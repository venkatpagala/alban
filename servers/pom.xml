<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>com.nabla.project</groupId>
		<artifactId>databases</artifactId>
		<version>1.0.1-SNAPSHOT</version>
		<relativePath>../databases/pom.xml</relativePath>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<artifactId>servers</artifactId>
	<name>Nabla Servers</name>
	<packaging>pom</packaging>
	<description>The Servers pom file is a superpom to centralize all third parties</description>
	<url>http://maven.nabla.mobi/dependencies/customs/main/databases/servers</url>

	<scm>
		<connection>scm:svn:http://alban.googlecode.com/svn/${project.svn.path}/servers</connection>
		<developerConnection>scm:svn:https://alban.googlecode.com/svn/${project.svn.path}/servers</developerConnection>
		<url>https://alban.googlecode.com/svn/${project.svn.path}/servers</url>
		<tag>HEAD</tag>
	</scm>

        <ciManagement>
                <system>Jenkins</system>
                <url>${JOB_URL}</url>
        </ciManagement>
        
        <!-- ================= Default Properties ================= -->
        <properties>
        	<!-- needed for maven-ear-plugin -->
        	<!-- TODO remove -->
		<as.version>5</as.version>
		<jboss.ear.version>5</jboss.ear.version>
		<jboss.home>${env.JBOSS_HOME}</jboss.home>
		<jboss.servers.directory>${jboss.home}</jboss.servers.directory>
		<jboss.server>standalone</jboss.server>
		<jboss.deploy.directory>${jboss.servers.directory}/${jboss.server}/deployments</jboss.deploy.directory>
		<scope.tomcat.only.type>${scope.provided}</scope.tomcat.only.type> <!-- for jar needed for tomcat only but not for other -->
		<scope.tomcat.never.type>${scope.compile}</scope.tomcat.never.type> <!-- for jar not needed for tomcat but for other -->
		<webdriver.base.url>http://${cargo.host}:${cargo.port}</webdriver.base.url> <!-- default url used by selenium butcan be ovverrided doing mvn clean verify -Psample -Dserver=jetty9x -Ddatabase=derby -Dwebdriver.base.url=http://localhost:9090 -->
        </properties>

	<build>
		<pluginManagement>
			<plugins>

                             <!-- mvn cargo:deploy -->
				<!-- call mvn clean verify org.codehaus.cargo:cargo-maven2-plugin:run
					> deploy.log 2>&1 -->
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>${maven.cargo.maven2.plugin.version}</version>
					<configuration>
						<wait>${cargo.wait}</wait>
						<container>
							<timeout>180000</timeout>
						</container>
						<configuration>
							<type>${cargo.configuration.type}</type>
							<!--<home>${cargo.container.home}</home>-->
							<properties>
								<cargo.hostname>${cargo.host}</cargo.hostname>
								<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
								<cargo.tomcat.manager.url>${deploy.url}</cargo.tomcat.manager.url>
								<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
								<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
								<cargo.logging>high</cargo.logging>
								<!-- <cargo.jvmargs> -Dnabla.config=${basedir}/src/main/resources
									-Dnabla.data=${basedir}/src/test/resources/data -->
								<!-- -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 -->
								<!-- </cargo.jvmargs> -->
							</properties>
						</configuration>
					</configuration>
				</plugin>
                              <!-- end Web application server helpers -->
			</plugins>
		</pluginManagement>
	</build>

	<profiles>

		<!-- ================= START Container Profiles ================= -->
		<profile>
			<id>jboss7x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jboss7x</value>
				</property>

			</activation>
			<properties>
				<!-- console user myNewUser admin added with add-user.sh -->
				<as.version>6</as.version>
				<jboss.ear.version>5</jboss.ear.version>
				<!-- START INFO USE BY MDA -->
				<jboss.home>${env.JBOSS_HOME}</jboss.home>
				<jboss.version>${jboss7.version}</jboss.version> <!-- overrided -->
				<server.version>${jboss.version}</server.version>
				<!--<jboss.home>C:\jboss-as-7.1.1.Final</jboss.home> -->
				<!--<jboss.home>/workspace/jboss-as-7.1.1.Final/</jboss.home> -->
				<server.home>${jboss.home}</server.home>
				<server.name>${product.name}</server.name>
				<server.port>${jboss.port}</server.port>
				<!-- Change this to the host on which your webservice will be deployed -->
				<webservice.host>localhost</webservice.host>
                           	<!-- Change this the port on which your webservice will be deploy -->
				<webservice.port>8180</webservice.port>
				<!-- JBoss7 uses java:/ and everyone else uses java:comp/env for server
					compatibility -->
				<datasource>java:jboss/datasources/${datasource.name}</datasource>
				<ejb.jndi.mappedname.pattern>java:global/${application.name}</ejb.jndi.mappedname.pattern>
				<!--<ejb.jndi.mappedname.pattern.openejb>global/${application.context}-ear/core-${project.version}</ejb.jndi.mappedname.pattern.openejb> -->
				<ejb.jndi.mappedname.pattern.openejb>${ejb.jndi.mappedname.pattern}</ejb.jndi.mappedname.pattern.openejb>
				<ejb.jndi.pattern>java:app/core-${project.version}.jar/#{ejbName}</ejb.jndi.pattern>
				<ejb.jndi.pattern.test>${ejb.jndi.mappedname.pattern.openejb}/#{ejbName}/Local</ejb.jndi.pattern.test>
				<!-- define JPA provider, check: https://docs.jboss.org/author/display/AS7/Developer+Guide#DeveloperGuide-PackagingtheHibernate3.5orgreater3.xJPApersistenceproviderwithyourapplication -->
				<jpa.provider.module>hibernate3-bundled</jpa.provider.module>
				<hibernate.cache.provider></hibernate.cache.provider> <!-- must be to org.hibernate.cache.HashtableCacheProvider for openejb junit
					tests -->
				<deploy.url>WRONG use tomcat profile</deploy.url>

				<!-- END INFO USE BY MDA -->
				<cargo.container>jboss71x</cargo.container>
				<cargo.container.home>${jboss.home}</cargo.container.home>
				<cargo.container.url>http://easynews.dl.sourceforge.net/sourceforge/jboss/jboss-${jboss.version}.zip</cargo.container.url>
				<!--<cargo.container.type>installed</cargo.container.type>-->
				<cargo.container.type>remote</cargo.container.type>
				<!--<cargo.configuration.type>existing</cargo.configuration.type>-->
				<!--<cargo.configuration.type>standalone</cargo.configuration.type>-->
				<cargo.configuration.type>runtime</cargo.configuration.type>
				<cargo.deployables.type>installed</cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jboss.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>
				<!--<jboss.bind.address>localhost</jboss.bind.address> -->
				<jboss.server>standalone</jboss.server>				
				<jboss.servers.directory>${jboss.home}</jboss.servers.directory>
				<jboss.deploy.directory>${jboss.servers.directory}/${jboss.server}/deployments</jboss.deploy.directory>
				<!-- for jboss 7.1.1 compile -->
                                <!--<scope.type>${scope.provided}</scope.type> -->
				<scope.type>${scope.compile}</scope.type>
				<!-- openejb works with hibernate 3.3.2.GA but not 3.6.8.Final -->
                                <!--
                             	<hibernate.core.version>3.6.8.Final</hibernate.core.version>
                             	<hibernate.validator.version>4.0.2.GA</hibernate.validator.version>
                             	-->
				<!-- works with hibernate.core.version 3.6.8.GA -->

				<!-- must be emtpy for non jboss7 target -->
                                <!-- uncomment for open ejb to work -->
                                <!--
                                <ejb.jndi.mappedname.pattern></ejb.jndi.mappedname.pattern>
                            	<ejb.jndi.mappedname.pattern.openejb></ejb.jndi.mappedname.pattern.openejb>
                            	<hibernate.cache.provider>org.hibernate.cache.HashtableCacheProvider</hibernate.cache.provider>
                                -->
			</properties>
			<build>
				<plugins>
					<!-- TODO http://cargo.codehaus.org/JBoss+Remote+Deployer -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<!--<home>${project.build.directory}/cargo/installs/jboss-as-dist-7.1.1.Final/jboss-as-7.1.1.Final/standalone/</home>-->
							<type>${cargo.configuration.type}</type>					
							<container>
								<containerId>${cargo.container}</containerId>
								<type>${cargo.container.type}</type>
								<log>${project.build.directory}/cargo.log</log>
								<logLevel>debug</logLevel>
								<home>${cargo.container.home}</home>									
								<!--		
								<artifactInstaller>
									<groupId>org.jboss.as</groupId>
									<artifactId>jboss-as-dist</artifactId>
									<version>${jboss.version}</version>									
								</artifactInstaller>
								-->
								<systemProperties>
									<jboss.server.log.threshold>INFO</jboss.server.log.threshold>
								</systemProperties>
							</container>
							<properties>								
								<cargo.servlet.port>${jboss.port}</cargo.servlet.port>
								<!--<cargo.jboss.configuration>default</cargo.jboss.configuration>
								<cargo.jboss.management.port>9999</cargo.jboss.management.port>
								<cargo.rmi.port>1099</cargo.rmi.port>-->
								<cargo.jboss.management-native.port>9999</cargo.jboss.management-native.port>								
								<cargo.logging>high</cargo.logging>
							</properties>							
						</configuration>
						<executions>
							<!--
        						<execution>
        						    <id>pre-integration-test</id>
        						    <phase>pre-integration-test</phase>
        						    <goals>
        						        <goal>deploy</goal>
        						    </goals>
        						</execution>
        						<execution>
        						    <id>post-integration-test</id>
        						    <phase>post-integration-test</phase>
        						    <goals>
        						        <goal>undeploy</goal>
        						    </goals>
        						</execution>							
							-->
							<!--
							<execution>
								<id>deploy</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>redeploy</goal>
								</goals>
							</execution>
							<execution>
								<id>verify-deploy</id>
								<phase>install</phase>
								<goals>
									<goal>deployer-deploy</goal>
								</goals>
							</execution>
							<execution>
								<id>clean-undeploy</id>
								<phase>pre-clean</phase>
								<goals>
									<goal>deployer-undeploy</goal>
								</goals>
							</execution>
							-->
						</executions>				
                                		<dependencies>
                                		        <dependency>
                                		                <groupId>org.jboss.as</groupId>
                                		                <artifactId>jboss-as-controller-client</artifactId>
                                		                <version>${jboss.version}</version>
                                		        </dependency>
                                		</dependencies>								
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jboss5x</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<property>
					<!--
					<name>server</name>
					<value>jboss5x</value>
					-->
                                        <name>!server</name>	
				</property>
			</activation>
			<properties>
				<as.version>5</as.version>
				<jboss.ear.version>5</jboss.ear.version>
                                <!-- START INFO USE BY MDA -->
				<jboss.home>${env.JBOSS_HOME}</jboss.home>
				<!--<jboss.home>C:\jboss-${jboss5.version}</jboss.home> -->
				<jboss.version>${jboss5.version}</jboss.version> <!-- overrided -->
				<server.version>${jboss.version}</server.version>				
				<server.home>${jboss.home}</server.home>
				<server.name>${product.name}</server.name>
				<server.port>${jboss.port}</server.port>

				<!-- Change this to the host on which your webservice will be deployed -->
				<webservice.host>localhost</webservice.host>
                           	<!-- Change this the port on which your webservice will be deploy -->
				<webservice.port>8180</webservice.port>
				<!-- JBoss7 uses java:/ and everyone else uses java:comp/env for server
					compatibility -->
				<datasource>java:/${datasource.name}</datasource>
				<ejb.jndi.mappedname.pattern></ejb.jndi.mappedname.pattern>
				<ejb.jndi.mappedname.pattern.openejb>${ejb.jndi.mappedname.pattern}</ejb.jndi.mappedname.pattern.openejb>
				<ejb.jndi.pattern>${application.context}-ear/#{ejbName}/Local</ejb.jndi.pattern>
				<ejb.jndi.pattern.test>${ejb.jndi.mappedname.pattern.openejb}/#{ejbName}/Local</ejb.jndi.pattern.test>
				<!-- works with jboss 7.0.2 <property name="jboss.as.jpa.providerModule"
					value="org.hibernate:3"/> in persistence.xml -->
				<jpa.provider.module>org.hibernate:3</jpa.provider.module>
				<hibernate.cache.provider>org.hibernate.cache.HashtableCacheProvider</hibernate.cache.provider>
				<deploy.url>WRONG use tomcat profile</deploy.url>

                             	<!-- END INFO USE BY MDA -->
				<cargo.container>jboss51x</cargo.container>
				<cargo.container.home>${jboss.home}</cargo.container.home>
				<cargo.container.url>http://downloads.sourceforge.net/jboss/jboss-${jboss5.version}.zip?big_mirror=1</cargo.container.url>
				<!--http://easynews.dl.sourceforge.net/sourceforge/jboss/jboss-${jboss.version}.zip -->
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type>installed</cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jboss.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>
				<!--<jboss.bind.address>localhost</jboss.bind.address> -->

				<jboss.server>default</jboss.server>
				<jboss.servers.directory>${jboss.home}/server</jboss.servers.directory>
				<jboss.deploy.directory>${jboss.servers.directory}/${jboss.server}/deploy</jboss.deploy.directory>
				<!-- for jboss 5.1.0 provided -->
				<scope.type>${scope.compile}</scope.type>
				<!-- openejb works with hibernate 3.3.2.GA but not 3.6.8.Final -->
				<!-- <hibernate.core.version>3.3.2.GA</hibernate.core.version> -->
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
								</zipUrlInstaller>
							</container>
						</configuration>
						<!--
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>			
						-->			
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>jetty6x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jetty6x</value>
				</property>
			</activation>
			<properties>
				<server.home></server.home>
				<jetty.version>${jetty6.version}</jetty.version>
				<server.version>${jetty.version}</server.version>
				<server.name>${product.name}</server.name>
				<server.port></server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>jetty6x</cargo.container>
				<cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
				<cargo.container.url>http://dist.codehaus.org/jetty/jetty-${server.version}/jetty-${server.version}.zip</cargo.container.url>
				<cargo.container.type>embedded</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jetty.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
							</container>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>						
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jetty7x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jetty7x</value>
				</property>
			</activation>
			<properties>
				<server.home></server.home>
				<jetty.version>${jetty7.version}</jetty.version>
				<server.version>${jetty.version}</server.version>
				<server.name>${product.name}</server.name>
				<server.port></server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>jetty7x</cargo.container>
				<cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
				<cargo.container.url>TODO</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jetty.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<artifactInstaller>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-distribution</artifactId>
									<version>${server.version}</version>
								</artifactInstaller>
							</container>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>						
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jetty8x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jetty8x</value>
				</property>
			</activation>
			<properties>
				<server.home></server.home>
				<jetty.version>${jetty8.version}</jetty.version>
				<server.version>${jetty.version}</server.version>
				<server.name>${product.name}</server.name>
				<server.port></server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>jetty8x</cargo.container>
				<cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
				<cargo.container.url>TODO</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jetty.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<artifactInstaller>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-distribution</artifactId>
									<version>${server.version}</version>
								</artifactInstaller>
							</container>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>						
					</plugin>
				</plugins>
			</build>
		</profile>		
		<profile>
			<id>jetty9x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jetty9x</value>
				</property>
			</activation>
			<properties>
				<server.home></server.home>
				<jetty.version>${jetty9.version}</jetty.version>
				<server.version>${jetty.version}</server.version>
				<server.name>${product.name}</server.name>
				<server.port></server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>jetty9x</cargo.container>
				<cargo.container.home>${project.build.directory}/jetty</cargo.container.home>
				<cargo.container.url>TODO</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jetty.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
				<scope.tomcat.only.type>${scope.compile}</scope.tomcat.only.type>
				<scope.tomcat.never.type>${scope.provided}</scope.tomcat.never.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<artifactInstaller>
									<groupId>org.eclipse.jetty</groupId>
									<artifactId>jetty-distribution</artifactId>
									<version>${server.version}</version>
								</artifactInstaller>
							</container>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>						
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>tomcat7x</id>
			<activation>
				<property>
					<name>server</name>
					<value>tomcat7x</value>
				</property>
			</activation>
			<properties>
				<tomcat.home>${env.CATALINA_BASE}</tomcat.home> 
				<!--<tomcat.home>/tomcat-7.0</tomcat.home>-->
				<server.home>${tomcat.home}</server.home>
				<server.version>7.0.16</server.version>
				<server.name>${product.name}</server.name>
				<server.port>${tomcat.port}</server.port>
				<datasource>${datasource.name}</datasource>
				<deploy.url>http://${cargo.host}:${tomcat.port}/manager/text</deploy.url>

				<cargo.container>tomcat7x</cargo.container>
				<cargo.container.home>${tomcat.home}</cargo.container.home>
				<cargo.container.url>http://archive.apache.org/dist/tomcat/tomcat-7/v${server.version}/bin/apache-tomcat-${server.version}.zip</cargo.container.url>
				<!--http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.30/bin/apache-tomcat-7.0.30.zip -->
				<!--<cargo.container.type>installed</cargo.container.type>-->
				<cargo.container.type>remote</cargo.container.type>
				<!--<cargo.configuration.type>existing</cargo.configuration.type>-->
				<cargo.configuration.type>runtime</cargo.configuration.type>
				<cargo.configuration.home>${tomcat.home}</cargo.configuration.home>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${tomcat.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>
				<scope.type>${scope.compile}</scope.type>
				<scope.tomcat.only.type>${scope.compile}</scope.tomcat.only.type>
				<scope.tomcat.never.type>${scope.provided}</scope.tomcat.never.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<home>${cargo.configuration.home}</home>
							<type>${cargo.configuration.type}</type>
							<properties>
								<cargo.remote.username>${cargo.remote.user}</cargo.remote.username>
								<cargo.remote.password>${cargo.remote.password}</cargo.remote.password>
								<cargo.remote.uri>${deploy.url}</cargo.remote.uri>
								<cargo.logging>high</cargo.logging>
								<cargo.servlet.port>${cargo.port}</cargo.servlet.port>
								<!--<cargo.tomcat.ajp.port>${tomcat.ajb.port}</cargo.tomcat.ajp.port>-->							
							</properties>								
							<container>
								<containerId>${cargo.container}</containerId>
								<type>${cargo.container.type}</type>
								<log>${project.build.directory}/cargo.log</log>
								<logLevel>debug</logLevel>
								<!--<home>${cargo.container.home}</home>							
								
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
								</zipUrlInstaller>
								-->
							</container>
						</configuration>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>deployer-deploy</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>deployer-undeploy</goal>
								</goals>
							</execution>
							<!--
							<execution>
								<id>verify-deploy</id>
								<phase>install</phase>
								<goals>
									<goal>deployer-deploy</goal>
								</goals>
							</execution>
							<execution>
								<id>clean-undeploy</id>
								<phase>pre-clean</phase>
								<goals>
									<goal>deployer-undeploy</goal>
								</goals>
							</execution>
							-->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>tomcat6x</id>
			<activation>
				<property>
					<name>server</name>
					<value>tomcat6x</value>
				</property>
			</activation>
			<properties>
				<tomcat.home>${env.CATALINA_BASE}</tomcat.home>
				<server.home>${tomcat.home}</server.home>
				<server.version>6.0.35</server.version>
				<server.name>${product.name}</server.name>
				<server.port>${tomcat.port}</server.port>
				<datasource>${datasource.name}</datasource>
				<deploy.url>http://localhost:${tomcat.port}/manager</deploy.url>

				<cargo.container>tomcat6x</cargo.container>
				<cargo.container.home>${tomcat.home}</cargo.container.home>
				<cargo.container.url>http://archive.apache.org/dist/tomcat/tomcat-6/v${server.version}/bin/apache-tomcat-${server.version}.zip</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${tomcat.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
				<scope.tomcat.only.type>${scope.compile}</scope.tomcat.only.type>
				<scope.tomcat.never.type>${scope.provided}</scope.tomcat.never.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<home>${cargo.container.home}</home>
							<container>
								<containerId>${cargo.container}</containerId>
								<type>${cargo.container.type}</type>
								<log>${project.build.directory}/cargo.log</log>
								<logLevel>debug</logLevel>								
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
								</zipUrlInstaller>
							</container>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>glassfish3x</id>
			<activation>
				<property>
					<name>server</name>
					<value>glassfish3x</value>
				</property>
			</activation>
			<properties>
				<!--<glassfish.home>${env.J2EE_HOME}</glassfish.home> -->
				<glassfish.home>C:/Sun/SDK</glassfish.home>
				<server.home>${glassfish.home}</server.home>
				<server.version>3.1.2</server.version>
				<server.name>${product.name}</server.name>
				<server.port>${glassfish.port}</server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>glassfish3x</cargo.container>
				<cargo.container.home>${server.home}</cargo.container.home>
				<cargo.container.url>http://download.java.net/glassfish/${server.version}/release/glassfish-${server.version}.zip</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${glassfish.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<type>${cargo.container.type}</type>
								<zipUrlInstaller>
									<url>${cargo.container.url}</url>
								</zipUrlInstaller>
							</container>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>jonas5x</id>
			<activation>
				<property>
					<name>server</name>
					<value>jonas5x</value>
				</property>
			</activation>
			<properties>
				<jonas.home>TODO</jonas.home>
				<server.home>${jonas.home}</server.home>
				<server.version>5.2.3</server.version>
				<server.name>${product.name}</server.name>
				<server.port>${jonas.port}</server.port>
				<datasource>${datasource.name}</datasource>

				<cargo.container>jonas5x</cargo.container>
				<cargo.container.home>${server.home}</cargo.container.home>
				<cargo.container.url>TODO</cargo.container.url>
				<cargo.container.type>installed</cargo.container.type>
				<cargo.configuration.type>standalone</cargo.configuration.type>
				<cargo.deployables.type></cargo.deployables.type>
				<cargo.host>localhost</cargo.host>
				<cargo.port>${jonas.port}</cargo.port>
				<cargo.wait>false</cargo.wait>
				<cargo.remote.user>admin</cargo.remote.user>
				<cargo.remote.password>microsoft</cargo.remote.password>

				<scope.type>${scope.compile}</scope.type>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>${cargo.container}</containerId>
								<type>${cargo.container.type}</type>
								<artifactInstaller>
									<groupId>org.ow2.jonas.assemblies.profiles</groupId>
									<artifactId>jonas-full</artifactId>
									<version>${server.version}</version>
									<classifier>bin</classifier>
								</artifactInstaller>
							</container>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
        	<!-- ================= END Container Profiles ================= -->
        	
        	<!-- ================= START Container JBoss Specific Profiles ================= -->
		<!-- Run with: mvn clean test -Parq-jbossas-managed -->
		<!-- does not work		
		<profile>			
			<id>arq-weld-ee-embedded</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
					<version>1.0.0.CR3</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.weld</groupId>
					<artifactId>weld-core</artifactId>
					<version>1.1.5.Final</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
		-->

		<!-- Run with: mvn clean test -Parq-jbossas-embedded -->
		<!-- does not work
		<profile>			
			<id>arq-jbossas-embedded</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-embedded</artifactId>
					<version>7.0.0.Beta3</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
		-->
		
		<profile>
			<!-- We add the JBoss repository as we need the JBoss AS connectors for 
				Arquillian -->
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the 
				test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<version>${org.jboss.as.arquillian.container.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- We add the JBoss repository as we need the JBoss AS connectors for 
				Arquillian -->
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<version>${org.jboss.as.arquillian.container.version}</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
 			<build>
            		    <plugins>
            		        <plugin>
            		            <groupId>org.apache.maven.plugins</groupId>
								<artifactId>maven-surefire-plugin</artifactId>
								<version>${maven.surefire.plugin.version}</version>
            		            <configuration>
            		                <environmentVariables>
            		                    <JBOSS_HOME>${project.build.directory}/jboss-as-${server.version}</JBOSS_HOME>
            		                </environmentVariables>
            		                <systemProperties>
            		                    <jboss.version>${server.version}</jboss.version>
            		                </systemProperties>
            		            </configuration>
            		        </plugin>
            		        <plugin>
            		            <groupId>org.apache.maven.plugins</groupId>
            		            <artifactId>maven-dependency-plugin</artifactId>
            		            <executions>
            		                <execution>
            		                    <id>unpack</id>
            		                    <phase>process-test-classes</phase>
            		                    <goals>
            		                        <goal>unpack</goal>
            		                    </goals>
            		                    <configuration>
            		                        <artifactItems>
            		                            <artifactItem>
            		                                <groupId>org.jboss.as</groupId>
            		                                <artifactId>jboss-as-dist</artifactId>
            		                                <version>${server.version}</version>
            		                                <type>zip</type>
            		                                <overWrite>false</overWrite>
            		                                <outputDirectory>${project.build.directory}</outputDirectory>
            		                            </artifactItem>
            		                        </artifactItems>
            		                    </configuration>
            		                </execution>
            		            </executions>
            		        </plugin>
            		    </plugins>
            		</build>			
		</profile>

		<!-- Run with: mvn clean test -Parq-glassfish-embedded -->
		<!-- does not work
		<profile>
			<id>arq-glassfish-embedded</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-glassfish-embedded-3.1</artifactId>
					<version>1.0.0.CR2</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.glassfish.main.extras</groupId>
					<artifactId>glassfish-embedded-all</artifactId>
					<version>3.1.2</version>
					<scope>provided</scope>
				</dependency>
			</dependencies>
		</profile>
		-->

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven.war.plugin.version}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>		
		
		  <profile>
			 <id>arq-jetty-embedded</id>
			 <activation>
				<activeByDefault>true</activeByDefault>
			 </activation>
			 <dependencies>
				<dependency>
				   <groupId>org.jboss.arquillian.container</groupId>
				   <artifactId>arquillian-jetty-embedded-7</artifactId>
				   <version>${org.jboss.arquillian.junit.version}</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.eclipse.jetty</groupId>
				   <artifactId>jetty-webapp</artifactId>
				   <version>${jetty.version}</version>
				   <scope>test</scope>
				</dependency>
				<!-- FIXME only required if we want to use @Resource injection -->
				<dependency>
				   <groupId>org.eclipse.jetty</groupId>
				   <artifactId>jetty-plus</artifactId>
				   <version>${jetty.version}</version>
				   <scope>test</scope>
				</dependency>
				<!-- TODO create a profile for the two JSF impls -->
				<!--
				<dependency>
				   <groupId>org.apache.myfaces.core</groupId>
				   <artifactId>myfaces-impl</artifactId>
				   <version>2.0.2</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.apache.myfaces.core</groupId>
				   <artifactId>myfaces-api</artifactId>
				   <version>2.0.2</version>
				   <scope>test</scope>
				</dependency>
				-->
				<dependency>
				   <groupId>com.sun.faces</groupId>
				   <artifactId>jsf-impl</artifactId>
				   <version>${sun.jsf.version}</version> <!--2.0.3-->
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.glassfish.web</groupId>
				   <artifactId>el-impl</artifactId>
				   <version>${el.impl.version}</version>
				   <scope>test</scope>
				</dependency>
			 </dependencies>
			 <build>
				<testResources>
				   <testResource>
					  <directory>src/test/resources</directory>
				   </testResource>
				   <testResource>
					  <directory>src/test/resources-jetty</directory>
				   </testResource>
				</testResources>
			 </build>
		  </profile>
		  <profile>
			 <id>arq-tomcat-embedded</id>
			 <dependencies>
				<dependency>
				   <groupId>org.jboss.arquillian.container</groupId>
				   <artifactId>arquillian-tomcat-embedded-6</artifactId>
				   <version>${org.jboss.arquillian.junit.version}</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.apache.tomcat</groupId>
				   <artifactId>catalina</artifactId>
				   <version>${tomcat.version}</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.apache.tomcat</groupId>
				   <artifactId>coyote</artifactId>
				   <version>${tomcat.version}</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.apache.tomcat</groupId>
				   <artifactId>jasper</artifactId>
				   <version>${tomcat.version}</version>
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>com.sun.faces</groupId>
				   <artifactId>jsf-impl</artifactId>
				   <version>${sun.jsf.version}</version> <!--2.0.3-->
				   <scope>test</scope>
				</dependency>
				<dependency>
				   <groupId>org.glassfish.web</groupId>
				   <artifactId>el-impl</artifactId>
				   <version>${el.impl.version}</version>
				   <scope>test</scope>
				</dependency>
			 </dependencies>
			 <build>
				<testResources>
				   <testResource>
					  <directory>src/test/resources</directory>
				   </testResource>
				   <testResource>
					  <directory>src/test/resources-tomcat</directory>
				   </testResource>
				</testResources>
			 </build>
		  </profile>
		  <profile>
			 <!--
			 This profile will copy all the test dependencies to target/test-libs to help
			 those not using Maven understand what dependencies they need on the classpath
			 -->
			 <id>copy-test-libs</id>
			 <build>
				<plugins> 
				   <plugin>
					  <groupId>org.apache.maven.plugins</groupId>
					  <artifactId>maven-dependency-plugin</artifactId>
					  <executions>
						 <execution>
							<id>copy-test-libs</id>
							<phase>process-test-resources</phase>
							<configuration>
							   <includeScope>test</includeScope>
							   <outputDirectory>${project.build.directory}/test-libs</outputDirectory>
							   <stripVersion>true</stripVersion>
							</configuration>
							<goals>
							   <goal>copy-dependencies</goal>
							</goals>
						 </execution>
					  </executions>
				   </plugin>
				</plugins> 
			 </build>
		  </profile>		
                <!-- ================= START Container JBoss Specific Profiles ================= -->
		<profile>
			<id>sample</id>
			<activation>
				<property>
					<name>profile.activation</name>
				</property>
			</activation>
			<modules>
				<module>sample</module>
			</modules>
		</profile>
	</profiles>

</project>
