// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SessionBeanBase.vsl in andromda-ejb3-cartridge.
//
package org.andromda.test.howto18.a;

import java.util.Collection;
import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Autogenerated EJB3 session bean base class UserServiceBean which contains
 * method level annotations for the session bean.  All method level annotations
 * are inherited by the extending session bean class.
 * TODO: Model Documentation for UserService
 */
public abstract class UserServiceBase implements UserService
{

    // ------ Session Context Injection ------

    @Resource
    protected SessionContext context;

    // ------ Persistence Context Definitions --------
    /**
     * Inject persistence context howtomodel
     */
    @PersistenceContext(unitName = "howtomodel")
    protected EntityManager emanager;


    // ------ DAO Injection Definitions --------

    /**
     * Inject DAO UserDao
     */
    @EJB(mappedName="howtomodel-1.0/UserDaoImpl")
    private UserDao userDao;

    // --------------- Constructors ---------------

    public UserServiceBase()
    {
        super();
    }

    // ------ DAO Getters --------

    /**
     * Get the injected DAO UserDao
     */
    protected UserDao getUserDao()
    {
        return this.userDao;
    }

    // -------- Business Methods  --------------

    /**
     * TODO: Model Documentation for UserService.addUser
     */
    public void addUser(User user) throws UserException
    {
        if (user == null)
        {
            throw new IllegalArgumentException("org.andromda.test.howto18.a.UserServiceBean.addUser(User user) - 'user' can not be null");
        }
        try
        {
            this.handleAddUser(user);
        }
        catch (UserException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.addUser(User user)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #addUser(User)}
     */
    protected abstract void handleAddUser(User user) throws Exception;

    /**
     * TODO: Model Documentation for UserService.getUser
     */
    public User getUser(Long id) throws UserException
    {
        try
        {
            return this.handleGetUser(id);
        }
        catch (UserException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getUser(Long id)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getUser(Long)}
     */
    protected abstract User handleGetUser(Long id) throws Exception;

    /**
     * TODO: Model Documentation for UserService.getAllUsers
     */
    public Collection getAllUsers() throws UserException
    {
        try
        {
            return this.handleGetAllUsers();
        }
        catch (UserException ex)
        {
            throw ex;
        }
        catch (Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getAllUsers()' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getAllUsers()}
     */
    protected abstract Collection handleGetAllUsers() throws Exception;


    // -------- Lifecycle Callbacks --------------

}