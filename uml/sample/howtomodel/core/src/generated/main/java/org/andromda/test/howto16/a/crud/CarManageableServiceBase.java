// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by crud/ManageableServiceBase.vsl in andromda-ejb3-cartridge.
//
package org.andromda.test.howto16.a.crud;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.ejb.Remote;
import javax.ejb.SessionContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import org.andromda.test.howto16.a.Car;
import org.andromda.test.howto16.a.CarType;
import org.andromda.test.howto16.a.Person;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;

/**
 * Autogenerated EJB manageable session bean class CarManageableService.
 */
/**
 * Do not specify the javax.ejb.${manageable.type} annotation
 * Instead, define the session bean in the ejb-jar.xml descriptor
 * javax.ejb.${manageable.type}
 */
@TransactionAttribute(TransactionAttributeType.REQUIRED)
@Remote({CarManageableService.class})
public final class CarManageableServiceBase
    implements CarManageableService
{
    // ------ Session Context Injection ------

    @Resource
    protected SessionContext context;

    // ------ Persistence Context Injection --------

    /**
     * Inject persistence context howtomodel
     */
    @PersistenceContext(unitName = "howtomodel")
    protected EntityManager emanager;

    // ------------ Private Operations ----------

    private List<Person> findPersonByIds(String[] ids)
        throws CarReadManageableException
    {
        try
        {
            Query query = emanager.createQuery("select entity from Person as entity where entity.serial in (:serial)");
            query.setParameter("serial", Arrays.asList(ids));
            return query.getResultList();
        }
        catch (Exception ex)
        {
            throw new CarReadManageableException(ex);
        }
    }

    // ------------ CRUD Operations -------------

    /**
     * Create operations
     *
     * @return CarValueObject
     * @throws CarCreateManageableException
     */
    public CarValueObject create(String serial, String name, CarType type, String owner)
        throws CarCreateManageableException
    {
        if (name == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.create(String serial, String name, CarType type, String owner) - 'name' can not be null");
        }

        if (type == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.create(String serial, String name, CarType type, String owner) - 'type' can not be null");
        }

        if (owner == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.create(String serial, String name, CarType type, String owner) - 'owner' can not be null");
        }

        final Car entity = new Car();
        entity.setSerial(serial);
        entity.setName(name);
        entity.setType(type);

        try
        {
            Person ownerEntity = null;
            if (owner != null)
            {
                ownerEntity = (Person)emanager.find(Person.class, owner);
            }

            if (ownerEntity != null)
            {
                entity.setOwner(ownerEntity);
            }


            emanager.persist(entity);
            emanager.flush();
            return toValueObject(entity);
        }
        catch (Exception ex)
        {
            throw new CarCreateManageableException(ex);
        }
    }

 
     /**
     * Entity read operation
     *
     * @return CarValueObject
     * @throws CarReadManageableException
     */
    public CarValueObject readById(String serial)
        throws CarReadManageableException
    {
        try{
            return toValueObject((Car)emanager.find(Car.class, serial));
        }
        catch (Exception ex)
        {
            throw new CarReadManageableException(ex);
        }
    }
       
    /**
     * Read operation
     *
     * @return List
     * @throws CarReadManageableException
     */
    public List<CarValueObject> read(String serial, String name, CarType type, String owner)
        throws CarReadManageableException
    {
        String logicalOperator = "";
        StringBuilder buf = new StringBuilder("from Car as entity");
        buf.append(" where ");
        if (serial != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.serial like :serial");
            logicalOperator = " and ";
        }
        if (name != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.name like :name");
            logicalOperator = " and ";
        }
        if (type != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.type = :type");
            logicalOperator = " and ";
        }
        if (owner != null)
        {
            buf.append(logicalOperator);
            buf.append("entity.owner = :owner");
            logicalOperator = " and ";
        }

        try
        {
            final Query query = emanager.createQuery(buf.toString());
            if (owner != null)
            {
                query.setParameter("owner", owner);
            }
            query.setMaxResults(250);
            return query.getResultList();
        }
        catch (Exception ex)
        {
            throw new CarReadManageableException(ex);
        }
    }

    /**
     * Read all operation
     *
     * @return List
     * @throws CarReadManageableException
     */
    public List<CarValueObject> readAll()
        throws CarReadManageableException
    {
        try
        {
            Query query = emanager.createQuery("select entity from Car as entity");
            query.setMaxResults(250);
            List<Car> entities = query.getResultList();
            CollectionUtils.transform(entities, new Transformer()
            {
                public Object transform(final Object object)
                {
                    Car result = (Car)object;
                    if (result.getOwner() != null)
                    {
                        result.setOwnerLabel(result.getOwner().getName());
                    }
                    return result;
                }
            });
            return toValueObjects(entities);
        }
        catch (Exception ex)
        {
            throw new CarReadManageableException(ex);
        }
    }

    /**
     * Read backing list operation
     *
     * @return Map
     * @throws CarReadManageableException
     */
    public Map readBackingLists()
        throws CarReadManageableException
    {
        final Map lists = new HashMap();

        try
        {
            lists.put("owner", emanager.createQuery("select item.serial, item.name from Person as item order by item.name").getResultList());
        }
        catch (Exception ex)
        {
            throw new CarReadManageableException(ex);
        }
        return lists;
    }

    /**
     * Update Operation
     *
     * @return CarValueObject
     * @throws CarUpdateManageableException
     */
    public CarValueObject update(String serial, String name, CarType type, String owner)
        throws CarUpdateManageableException
    {
        if (serial == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.update(String serial, String name, CarType type, String owner) - 'serial' can not be null");
        }

        if (name == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.update(String serial, String name, CarType type, String owner) - 'name' can not be null");
        }

        if (type == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.update(String serial, String name, CarType type, String owner) - 'type' can not be null");
        }

        if (owner == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.update(String serial, String name, CarType type, String owner) - 'owner' can not be null");
        }

        final Car entity = (Car)emanager.find(Car.class, serial);
        entity.setName(name);
        entity.setType(type);

        try
        {
            Person ownerEntity = null;
            if (owner != null)
            {
                ownerEntity = (Person)emanager.find(Person.class, owner);
            }

            if (ownerEntity != null)
            {
                entity.setOwner(ownerEntity);
            }

            emanager.merge(entity);
            emanager.flush();
            return toValueObject(entity);
        }
        catch (Exception ex)
        {
            throw new CarUpdateManageableException(ex);
        }
    }

    /**
     * Delete operation
     *
     * @throws CarDeleteManageableException
     */
    public void delete(String[] ids)
        throws CarDeleteManageableException
    {
        if (ids == null)
        {
            throw new IllegalArgumentException(
                "org.andromda.test.howto16.a.crud.CarManageableService.delete(String[] ids) - 'ids' can not be null");
        }

        try
        {
            final Query queryObject = emanager.createQuery("delete from Car where serial in (:ids)");
            queryObject.setParameter("ids", Arrays.asList(ids));
            queryObject.executeUpdate();
        }
        catch (Exception ex)
        {
            throw new CarDeleteManageableException(ex);
        }
    }

    private static List<CarValueObject> toValueObjects(Collection<Car> entities)
    {
        final List<CarValueObject> list = new ArrayList<CarValueObject>();

        for (Iterator<Car> iterator = entities.iterator(); iterator.hasNext();)
        {
            list.add(toValueObject(iterator.next()));
        }

        return list;
    }

    private static CarValueObject toValueObject(Car entity)
    {
        final CarValueObject valueObject = new CarValueObject();

        valueObject.setSerial(entity.getSerial());
        valueObject.setName(entity.getName());
        valueObject.setType(entity.getType());

        final Person owner = entity.getOwner();
        if (owner != null)
        {
            valueObject.setOwner(owner.getSerial());
            valueObject.setOwnerLabel(owner.getName());
        }

        return valueObject;
    }
}