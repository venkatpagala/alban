// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by EntityEmbeddable.vsl in andromda-ejb3-cartridge.
//
package org.andromda.test.howto9.a;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;

/**
 * Autogenerated POJO EJB mapped super class for Vehicle containing the
 * bulk of the entity implementation.
 *
 * This is a mapped super class and autogenerated by AndroMDA using the EJB3
 * cartridge.
 *
 * DO NOT MODIFY this class.
 *
 * 
 */
@MappedSuperclass
public class Vehicle implements Serializable
{
    private static final long serialVersionUID = 1400666626864074333L;

    // ----------- 4 Attribute Definitions ------------
    private Long id;
    private String make;
    private String model;
    private short age;

    // -------- 4 Attribute Accessors ----------
    /**
     * Get the id property.
     * 
     * @return Long The value of id
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID", unique = true, nullable = false, insertable = true, updatable = true)
    public Long getId()
    {
        return this.id;
    }

    /**
     * Set the id property.
     * @param value the new value
     */
    public void setId(Long value)
    {
        this.id = value;
    }

    /**
     * Get the make property.
     * 
     * @return String The value of make
     */
    @Column(name = "MAKE", unique = true, nullable = false, insertable = true, updatable = true)
    public String getMake()
    {
        return this.make;
    }

    /**
     * Set the make property.
     * @param value the new value
     */
    public void setMake(String value)
    {
        this.make = value;
    }

    /**
     * Get the model property.
     * 
     * @return String The value of model
     */
    @Column(name = "MODEL", unique = true, nullable = false, insertable = true, updatable = true)
    public String getModel()
    {
        return this.model;
    }

    /**
     * Set the model property.
     * @param value the new value
     */
    public void setModel(String value)
    {
        this.model = value;
    }

    /**
     * Get the age property.
     * 
     * @return short The value of age
     */
    @Column(name = "AGE", unique = true, nullable = false, insertable = true, updatable = true)
    public short getAge()
    {
        return this.age;
    }

    /**
     * Set the age property.
     * @param value the new value
     */
    public void setAge(short value)
    {
        this.age = value;
    }


    // ------------- 0 Relations ------------------
    // --------------- Constructors -----------------

    /**
     * Default empty constructor
     */
    public Vehicle()
    {
        // Default empty constructor
    }

    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this class to the values provided by
     * the parameters.
     *
     * @param make Value for the make property
     * @param model Value for the model property
     * @param age Value for the age property
     */
    public Vehicle(String make, String model, short age)
    {
        setMake(make);
        setModel(model);
        setAge(age);
    }


    // -------- Common Methods -----------

    /**
     * Indicates if the argument is of the same type and all values are equal.
     *
     * @param object The target object to compare with
     * @return boolean True if both objects a 'equal'
     */
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof Vehicle))
        {
            return false;
        }
        final Vehicle that = (Vehicle)object;
        if (this.getId() == null || that.getId() == null || !this.getId().equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code value for the object
     *
     * @return int The hash code value
     */
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (getId() == null ? 0 : getId().hashCode());

        return hashCode;
    }

    /**
     * Returns a String representation of the object
     *
     * @return String Textual representation of the object displaying name/value pairs for all attributes
     */
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Vehicle(=");
        sb.append("id: ");
        sb.append(getId());
        sb.append(", make: ");
        sb.append(getMake());
        sb.append(", model: ");
        sb.append(getModel());
        sb.append(", age: ");
        sb.append(getAge());
        sb.append(")");
        return sb.toString();
    }

}