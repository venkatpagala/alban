// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: Entity.vsl in andromda-ejb3-cartridge.
//
package org.andromda.test.howto9.b;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Autogenerated POJO EJB3 implementation class for Car.
 *
 * Add any manual implementation within this class.  This class will NOT
 * be overwritten with incremental changes.
 *
 *
 *
 */

@Entity
@Table(name = "CAR")
// Uncomment to enable entity listener for Car
// @javax.persistence.EntityListeners({org.andromda.test.howto9.b.CarListener.class})
// Uncomment to enable caching for Car
// @org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.TRANSACTIONAL)
@NamedQueries( { @NamedQuery(name = "Car.findAll", query = "select car from Car AS car"), @NamedQuery(name = "Car.findByType", query = "from Car as car where car.type = :type") })
public class Car extends CarEmbeddable implements Serializable, Comparable<Vehicle>
{

    /**
     * The serial version UID of this class required for serialization.
     */
    private static final long serialVersionUID = 48981959400562006L;

    // --------------- constructors -----------------

    /**
     * Default Car constructor
     */
    public Car()
    {
        super();
    }

    /**
     * Implementation for the constructor with all POJO attributes except auto incremented identifiers.
     * This method sets all POJO fields defined in this/super class to the
     * values provided by the parameters.
     *
     */
    public Car(final String make, final String model, final short age, final String serial, final String name, final CarType type)
    {
        super(make, model, age, serial, name, type);
    }

    /**
     * Constructor with all POJO attribute values and CMR relations.
     *
     * @param make Value for the make property
     * @param model Value for the model property
     * @param age Value for the age property
     * @param serial Value for the serial property
     * @param serial Value for the serial property
     * @param name Value for the name property
     * @param type Value for the type property
     * @param owner Value for the owner relation
     */
    public Car(final String make, final String model, final short age, final String serial, final String name, final CarType type, final Person owner)
    {
        super(make, model, age, serial, name, type, owner);
    }

    // -------------- Entity Methods -----------------

    /**
     * <p>
     * Returns true if this car is current rented.
     * </p>
     */
    @Transient
    public boolean isRented()
    {
        // TODO put your implementation here.
        return false;
    }

    /**
     * <p>
     * Returns true if all cars are currently rented.
     * </p>
     */
    @Transient
    public static boolean allCarsAreRented()
    {
        // TODO put your implementation here.
        return false;
    }

    // --------------- Lifecycle callbacks -----------------

    /**
     * @see Comparable#compareTo(T)
     */
    public int compareTo(final Car o)
    {
        int cmp = 0;
        if (getSerial() != null)
        {
            cmp = getSerial().compareTo(o.getSerial());
        } else
        {
            if (getName() != null)
            {
                cmp = (cmp != 0 ? cmp : getName().compareTo(o.getName()));
            }
            if (getType() != null)
            {
                cmp = (cmp != 0 ? cmp : getType().compareTo(o.getType()));
            }
        }
        return cmp;
    }
}
