// license-header java merge-point
// Generated by andromda-jsf cartridge (flow\portlet\PortletPhaseListener.java.vsl) DO NOT EDIT!
package org.andromda.presentation.jsf;

import java.util.Map;
import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.portlet.PortletRequest;

/**
 * A phase listener which handles the pre-population of the form that is passed
 * from view to view.
 *
 * @author Chad Brandon
 */
public class PortletPhaseListener
    extends AbstractPhaseListener
{
    private static final long serialVersionUID = 1L;

    private static final String FACES_CONTEXT = "facesContext";

    /**
     * Liferay specific attribute available in the request that gives the current URL in the browser.
     */
    private static final String CURRENT_URL = "CURRENT_URL";

    @Override
    protected void handleBeforePhase(PhaseEvent event)
    {
        String viewId = this.getViewId(event);
        if (viewId != null && event.getFacesContext() != null)
        {
            // - get the parameters from the current URL and set them as request attributes to make them available to the current portlets
            //   (otherwise we'd need to namespace prefix the parameter names in order to pass them to the portlet - at least in Liferay)
            final PortletRequest request = (PortletRequest)event.getFacesContext().getExternalContext().getRequest();
            final String currentUrl = (String)request.getAttribute(CURRENT_URL);
            final Map<String, Object> parameters = JsfUtils.extractParameters(currentUrl);
            if (parameters != null && !parameters.isEmpty())
            {
                final FacesContext context = event.getFacesContext();
                final Object form = context.getApplication().getVariableResolver().resolveVariable(context, "form");
                if (form != null)
                {
                    FormPopulator.populateFormFromPropertyMap(form, null, parameters);
                }
                else
                {
                    for (final String parameter : parameters.keySet())
                    {
                        request.setAttribute(parameter, parameters.get(parameter));
                    }
                }
            }
            // - make the faces context available to all views
            ((PortletRequest)event.getFacesContext().getExternalContext().getRequest()).setAttribute(FACES_CONTEXT, event.getFacesContext());

        }
    }

    protected String getViewId(PhaseEvent event)
    {
        String viewId = null;
        if (event.getFacesContext() != null)
        {
            UIViewRoot view  = event.getFacesContext().getViewRoot();
            viewId = view != null ? view.getViewId() : null;
        }
        return viewId;
    }

    private void populateView(PhaseEvent event, String viewId)
    {
        final Object session = event.getFacesContext().getExternalContext().getSession(false);
        if (!this.isViewPopulated(session, viewId))
        {
            this.setCurrentView(session, viewId);
        }
    }

    @Override
    protected void handleAfterPhase(PhaseEvent event)
    {
        final String viewId = this.getViewId(event);
        if (PhaseId.INVOKE_APPLICATION.equals(event.getPhaseId()))
        {
            this.populateView(event, viewId);
        }
        else
        {
            // - remove the current view
            this.setCurrentView(event.getFacesContext().getExternalContext().getSession(false), null);
        }
    }

    /**
     * The name of the attribute that stores the current view id for this phase listener.
     */
    private static final String CURRENT_VIEW_ATTRIBUTE = PortletPhaseListener.class.getName() + "ViewId";

    /**
     * Keeps track of whether or not the view has already been populated (so that we don't try again).
     *
     * @param session the session object that stores the view id to keep track of whether or not its been populated.
     * @param viewId the view Id.
     * @return true if populated, false otherwise.
     */
    protected boolean isViewPopulated(final Object session, final String viewId)
    {
        final Object currentView = JsfUtils.getAttribute(session, CURRENT_VIEW_ATTRIBUTE);
        return currentView != null && currentView.equals(viewId);
    }

    /**
     * Sets the given viewId as the current view tracked by this portlet.
     * @param session the session object that stores the view id to keep track of whether or not its been populated.
     * @param viewId the view id to set.
     */
    protected void setCurrentView(final Object session, final String viewId)
    {
        JsfUtils.setAttribute(session, CURRENT_VIEW_ATTRIBUTE, viewId);
    }
}