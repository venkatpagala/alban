#
# File generated by CMakeBuilder
#
#

SET(CMAKE_BUILT_TYPE "Debug")

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

OPTION(BUILD_SHARED_LIBS "Build shared libraries." ON)

SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
        
# AIX                           AIX  
# BSD/OS                        BSD/OS  
# FreeBSD                       FreeBSD  
# HP-UX                         HP-UX  
# IRIX                          IRIX  
# Linux                         Linux  
# NetBSD                        NetBSD  
# OpenBSD                       OpenBSD  
# OFS/1 (Digital Unix)          OSF1  
# SCO OpenServer 5              SCO_SV  
# SCO UnixWare 7                UnixWare  
# SCO UnixWare (pre release 7)  UNIX_SV  
# SCO XENIX                     Xenix  
# Solaris                       SunOS  
# SunOS                         SunOS  
# Tru64                         Tru64  
# Ultrix                        ULTRIX  
# cygwin                        CYGWIN_NT-5.1
# MacOSX                        Darwin

MESSAGE("OS is : ${CMAKE_SYSTEM}-${CMAKE_SYSTEM_VERSION} ${CMAKE_UNAME} ${CMAKE_HOST_UNIX} ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR} ")

#default /usr/local
#SET(CMAKE_INSTALL_PREFIX  /usr/local)

SET(PROJECT_TARGET ${CMAKE_BUILD_TYPE})

MESSAGE(STATUS "KPLUSTP_SRC, KPLUSTP_OBJ, KPLUS_ROOT and THIRDPARTY_ROOT setted to environement values")
  
SET(DEV_SOURCE_DIR "$ENV{KPLUSTP_SRC}")
SET(DEV_BINARY_DIR "$ENV{KPLUSTP_OBJ}")
SET(PROJECT_SOURCE_DIR "$ENV{KPLUSTP_SRC}")
SET(PROJECT_BINARY_DIR "$ENV{KPLUSTP_OBJ}")
SET(TOOLS_ROOT "$ENV{KPLUS_ROOT}/tools")
#SET(TOOLS_ROOT "/kplus/tools")
SET(THIRDPARTY_ROOT "$ENV{THIRDPARTY_ROOT}")
SET(THIRDPARTY_ROOT_LOCAL "${THIRDPARTY_ROOT}")

SET(DATABASE_ROOT "${THIRDPARTY_ROOT_LOCAL}/database")

MESSAGE("CMAKE_SYSTEM is ${CMAKE_SYSTEM}")

INCLUDE(${PROJECT_SOURCE_DIR}/config/ProjectVersion.cmake)

IF(UNIX)

  MESSAGE(STATUS "UNIX found")  

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux found")
    SET(MACHINE x86Linux)

    SET(CMAKE_CXX_FLAGS "-g -Wall -pthread")
    #SET(CMAKE_CXX_FLAGS "-g -Wall -Werror -pthread")
    SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")
    # DO NOT NEED FOR __GNUC__ -DEffix_Infra_HAS_BOOL
    ADD_DEFINITIONS(-Dlinux -DP100)

  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS found")
    SET(MACHINE sun4sol)

    ADD_DEFINITIONS(-Dsolaris -DSYSV -DSVR4 -DEffix_Infra_HAS_BOOL -DP100 -DDEBUG -DANSI_C -D_POSIX_THREADS -mt -xildoff -DOWTOOLKIT_WARNING_DISABLED)
    
  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

  IF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 found")
    SET(MACHINE x86sol)  
    
  ELSE("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 not found")
  ENDIF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")    

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN found")
    SET(MACHINE x86Linux)
    
    #INCLUDE_DIRECTORIES("/cygdrive/c/cygwin/lib/gcc/i686-pc-cygwin/${GCC_VERSION}/include/c++")
    #LINK_DIRECTORIES("/cygdrive/c/cygwin/lib/gcc/i686-pc-cygwin/${GCC_VERSION}/debug")    
    
    SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")

    ADD_DEFINITIONS(-Dcygwin -Dlinux -DP100)
    #ADD_DEFINITIONS(-DANSI_C -D_POSIX_THREADS)
    #ADD_DEFINITIONS(-DTAO_EXPORT_MACRO -DACE_NO_INLINE -DACE_BUILD_DLL)
    #ADD_DEFINITIONS(-DACE_HAS_EXCEPTIONS)
    ADD_DEFINITIONS(-DEffix_Infra_HAS_NEW_IOSTREAMS -DDEBUG -DNOMINMAX)
    ADD_DEFINITIONS(-DEXCEPTION_EXPORTS -DKTPPLUSTHREAD_EXPORTS -DLOGMGR_EXPORTS -DIDA_UTILS_EXPORTS -DUTILS_EXPORTS -DPROPMGR_EXPORTS -DOBJECTMGR_EXPORTS -DMSGMGR_EXPORTS)
 
  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")    

ELSE(UNIX)
  MESSAGE(STATUS "UNIX not found")
ENDIF(UNIX)

IF(MINGW)

  MESSAGE(STATUS "MINGW found")    
  SET(MACHINE x86Linux)    

  SET(TIBCO_VERSION "7.2")
  SET(XERCES_VERSION "2_5_0")
  SET(CORBA_VERSION "1_3_")

  INCLUDE_DIRECTORIES("C:\\cygwin\\usr\\include")
  LINK_DIRECTORIES("C:\\cygwin\\lib")

  ADD_DEFINITIONS(-Dlinux -DuseTao -DACE_HAS_EXCEPTIONS -D_TEMPLATES_ENABLE_ -D_REENTRANT -DEffix_Infra_HAS_BOOL)
    
ELSE(MINGW)
  MESSAGE(STATUS "MINGW not found")
  
ENDIF(MINGW)

SET(PROJECT_INCLUDE_DIR ${PROJECT_BINARY_DIR}/include/${PROJECT_TARGET})
SET(PROJECT_INSTALL_DIR ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_TARGET})
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib/${MACHINE}/${PROJECT_TARGET})
  
SET(CORBA_PC_DIR ${PROJECT_BINARY_DIR}/project/corba/${MACHINE}/${PROJECT_TARGET})

MESSAGE(STATUS "MACHINE is ${MACHINE}")
  
MAKE_DIRECTORY(${PROJECT_INCLUDE_DIR}) 
MAKE_DIRECTORY(${CORBA_PC_DIR})

OPTION(BUILD_SHARED_LIBS "Build PROJECT shared libraries." OFF)

#IF(WIN32)
#  ADD_DEFINITIONS("-DWIN32")
#ENDIF(WIN32)

#CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config/config.h.in ${PROJECT_BINARY_DIR}/include/config.h)

SET(MOVE_FILE_COMMAND mv)
SET(COPY_FILE_COMMAND cp)

MESSAGE(STATUS "Project source directory is ${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "Project include directory is ${PROJECT_INCLUDE_DIR}")

INCLUDE(${PROJECT_SOURCE_DIR}/config/ProjectMacro.cmake)

OPTION(ENABLE_TESTS "Enable building of tests" ON)

IF( ENABLE_TESTS )

  INCLUDE(FindCppUnit)
  
  # If not in standard paths, set CMAKE_xxx_PATH's in environment, eg.
  # export CMAKE_INCLUDE_PATH=/opt/local/include
  # export CMAKE_LIBRARY_PATH=/opt/local/lib
  #FIND_LIBRARY(CPPUNIT cppunit)
  #FIND_PATH(CPPUNIT_HEADERS cppunit/TestRunner.h)
  #IF ( CPPUNIT AND CPPUNIT_HEADERS)
  #  MESSAGE("-- Looking for Cppunit - found")
  #ELSE ( CPPUNIT AND CPPUNIT_HEADERS )
  #  MESSAGE( FATAL_ERROR "-- Looking for Cppunit - not found")
  #ENDIF ( CPPUNIT AND CPPUNIT_HEADERS )
ENDIF(ENABLE_TESTS )

#Inclusion
# See ${PROJ_SOURCE_DIR}/config for special inclusion
INCLUDE(FindBoost)
INCLUDE(FindGettext)
INCLUDE(FindLibXml2)
#INCLUDE(FindX11)
#INCLUDE(FindQt3)
INCLUDE(FindZLIB)
INCLUDE(FindDoxygen)

#HOW TO USE
#cmake -DWITH_GUI=ON -DDATA_DIR=/home/me/datadir .

IF (NOT DATA_DIR)
  SET(DATA_DIR "/usr/share/mydatadir")
ENDIF(NOT DATA_DIR)
MESSAGE(STATUS "Data are in directory ${DATA_DIR}")

INCLUDE_DIRECTORIES(${PROJECT_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX})

IF(UNIX)

  MESSAGE(STATUS "UNIX found")  

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS found")

    SET(TIBCO_VERSION "8.1.2")
    SET(XERCES_VERSION "3_0_1")
    
    #Inclusion de CORBA
    SET(CORBA_VERSION "")

    SET(JAVA_AWT_INCLUDE_DIRECTORIES ${THIRDPARTY_ROOT}/j2se/${MACHINE}/jdk1.5/include)
    SET(JAVA_INCLUDE_PATH ${THIRDPARTY_ROOT}/j2se/${MACHINE}/jdk1.5/include/solaris)
    SET(JAVA_INCLUDE_PATH2 ${THIRDPARTY_ROOT}/j2se/${MACHINE}/jdk1.5/include/solaris)
    SET(JAVA_JVM_LIBRARY_DIRECTORIES ${THIRDPARTY_ROOT}/j2se/${MACHINE}/jdk1.5/jre/lib/sparc)

    SET(JAVA_AWT_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/libjawt.so ${JAVA_JVM_LIBRARY_DIRECTORIES}/xawt/libmawt.so)
    SET(JAVA_JVM_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/libjvm.so)    
    
  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")
    MESSAGE(STATUS "SunOS not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")

  IF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 found")
    SET(MACHINE x86sol)  
    
  ELSE("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")
    MESSAGE(STATUS "SunOS-5.10 not found")
  ENDIF("${CMAKE_SYSTEM}" MATCHES "SunOS-5.10")    

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux found")

    SET(TIBCO_VERSION "7.2.x")

    SET(KONDOR_DATABASE_VERSION_MAIN "5.0")
    SET(KONDOR_DATABASE_VERSION_MAJOR "30")
    SET(KONDOR_DATABASE_VERSION_MINOR "95")
    SET(KONDOR_DATABASE_VERSION "v${KONDOR_DATABASE_VERSION_MAJOR}u${KONDOR_DATABASE_VERSION_MINOR}")
    SET(KONDOR_DATABASE_VERSION_UPRGRADE "UPGRADE_${KONDOR_DATABASE_VERSION_MINOR}")
    
    SET(INFRAFA_FAKETAT_VERSION "12008")
    
    SET(KONDOR_VERSION2 "")    
    
    SET(SYBASE_VERSION "12.5")
    SET(SYBASE_SERVER_VERSION "12.51")
    SET(SYBASE_ESD_VERSION "17")    
    
    SET(IDA_MAJOR_VERSION "4")
    SET(IDA_VERSION "v4r31")

    LINK_DIRECTORIES(/usr/lib)
        
    SET(BOOST_OUTPUT_PATH ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_TARGET}/lib/boost-1_41_0)
    LINK_DIRECTORIES(${BOOST_OUTPUT_PATH})
          
    #z boost_thread-gcc-mt intl ncurses
    SET(Boost_LIBRARIES boost_thread-mt)
    SET(ZLIB_LIBRARY_DIRS z)
    SET(Gettext_LIBRARY_DIRS intl ncurses)
    SET(LIBXML_LIBRARY_DIRS xml2)

    LINK_DIRECTORIES(${Gettext_LIBRARY_DIRS})
  
    #Inclusion de CORBA
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers)
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/TAO)
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/TAO/orbsvcs)
  
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib)        
    
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)    
        
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib3p)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug)
    
    #INCLUDE_DIRECTORIES(/cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/OCI/include)
    #LINK_DIRECTORIES(/cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/OCI/lib/MSVC/vc71)

    #Inclusion de KPLUS
    SET(KPLUS_ROOT ${THIRDPARTY_ROOT_LOCAL}/kondor/${KONDOR_VERSION1})

    SET(KPLUS_LIB_DIRS ${KPLUS_ROOT}/lib/${MACHINE})
  
    LINK_DIRECTORIES(${KPLUS_LIB_DIRS} ${KPLUS_LIB_DIRS}/dependencies)
    
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/artix30/${MACHINE}/artix/3.0/include)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/artix30/${MACHINE}/bin)  
    
  ELSE(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")
    MESSAGE(STATUS "Linux not found")
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux")

  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")
    MESSAGE(STATUS "CYGWIN found")     
        
    #SET(LIB_PREFIX lib)
    #SET(LIB_STATIC_SUFFIX .a)
    #SET(LIB_DYNAMIC_SUFFIX .dll)

    SET(TIBCO_VERSION "7.2.x")

    SET(KONDOR_DATABASE_VERSION_MAIN "5.0")
    SET(KONDOR_DATABASE_VERSION_MAJOR "30")
    SET(KONDOR_DATABASE_VERSION_MINOR "95")
    SET(KONDOR_DATABASE_VERSION "v${KONDOR_DATABASE_VERSION_MAJOR}u${KONDOR_DATABASE_VERSION_MINOR}")
    SET(KONDOR_DATABASE_VERSION_UPRGRADE "UPGRADE_${KONDOR_DATABASE_VERSION_MINOR}")
    
    SET(INFRAFA_FAKETAT_VERSION "12008")
    
    SET(KONDOR_VERSION2 "")    
    
    SET(SYBASE_VERSION "12.5")
    SET(SYBASE_SERVER_VERSION "12.51")
    SET(SYBASE_ESD_VERSION "17")    
    
    SET(IDA_MAJOR_VERSION "4")
    SET(IDA_VERSION "v4r31")

    LINK_DIRECTORIES(/usr/lib)
        
    SET(BOOST_OUTPUT_PATH ${PROJECT_BINARY_DIR}/install/${MACHINE}/${PROJECT_TARGET}/lib/boost-1_41_0)
    LINK_DIRECTORIES(${BOOST_OUTPUT_PATH})
          
    #z boost_thread-gcc-mt intl ncurses
    #SET(Boost_LIBRARIES boost_thread-gcc-mt)
    SET(Boost_LIBRARIES boost_thread-gcc34-mt-1_41)
    SET(ZLIB_LIBRARY_DIRS z)
    SET(Gettext_LIBRARY_DIRS intl ncurses)  
    #SET(LIBXML_LIBRARY_DIRS LIBXML2_LIBRARIES) 
    SET(LIBXML_LIBRARY_DIRS xml2)

    LINK_DIRECTORIES(${Gettext_LIBRARY_DIRS})
  
    #Inclusion de CORBA
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers)
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/TAO)
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/TAO/orbsvcs)
  
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib)        
    
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)    
        
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/lib3p)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug)
    
    INCLUDE_DIRECTORIES(/cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/OCI/include)
    LINK_DIRECTORIES(/cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/OCI/lib/MSVC/vc71)
            
    #${JAVA_JVM_LIBRARY_DIRECTORIES}/xawt/libmawt.so
    #SET(JAVA_AWT_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/jawt.dll)
    #SET(JAVA_JVM_LIBRARY ${JAVA_JVM_LIBRARY_DIRECTORIES}/jvm.dll)    

    #Inclusion de KPLUS
    SET(KPLUS_ROOT ${THIRDPARTY_ROOT_LOCAL}/kondor/${KONDOR_VERSION1})
    #SET(ADFIN_ROOT ${THIRDPARTY_ROOT}/adfin/${ADFIN_VERSION})

    ###SET(KPLUS_INCLUDE_DIRS ${KPLUS_ROOT}/include)
    #SET(ADFIN_INCLUDE_DIRS ${ADFIN_ROOT}/include)
    SET(KPLUS_LIB_DIRS ${KPLUS_ROOT}/lib/${MACHINE})
    #SET(ADFIN_LIB_DIRS ${ADFIN_ROOT}/lib/${MACHINE})
  
    ###INCLUDE_DIRECTORIES(${KPLUS_INCLUDE_DIRS})
    #INCLUDE_DIRECTORIES(${ADFIN_INCLUDE_DIRS})
  
    LINK_DIRECTORIES(${KPLUS_LIB_DIRS} ${KPLUS_LIB_DIRS}/dependencies)
    #LINK_DIRECTORIES(${ADFIN_LIB_DIRS}/debug/shared ${ADFIN_LIB_DIRS}/opt)
    
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/artix30/${MACHINE}/artix/3.0/include)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/artix30/${MACHINE}/bin)  
      
    #Inclusion de KML
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/KML/V1/${KML_VERSION}/include)
    #LINK_DIRECTORIES(${THIRDPARTY_ROOT}/KML/V1/${KML_VERSION}/lib/${MACHINE}/opt/shared)            
            
    #Inclusion de DATABASE KONDOR
    #INCLUDE_DIRECTORIES(${DATABASE_ROOT}/products/kondor/${KONDOR_DATABASE_VERSION_MAIN}/${KONDOR_DATABASE_VERSION_UPRGRADE}/src/include)
    #LINK_DIRECTORIES(${DATABASE_ROOT}/products/kondor/${KONDOR_DATABASE_VERSION_MAIN}/${KONDOR_DATABASE_VERSION_UPRGRADE}/src/lib/${MACHINE}/opt/shared)
    #/rms/packages/kdb/3.0_upg97/lib
    #/database/release/kmf/package/V1/LAST_SRC
    #/infra/dev/projects/kml
                    
  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "CYGWIN")  
  
  IF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")  

    LINK_DIRECTORIES(/usr/lib)

    SET(LIB_PREFIX lib)
    SET(LIB_STATIC_SUFFIX .a)
    SET(LIB_DYNAMIC_SUFFIX .so)
      
    #QT_USE_FILE
    #SET(QT_INCLUDE_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/include)
    #SET(QT_BINARY_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/bin)
    #SET(QT_LIBRARY_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/debug/lib)
    #SET(QT_PLUGINS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/plugins)
    #SET(QT_TRANSLATIONS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/translations)
    #SET(QT_DOC_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/doc)
    #SET(QT_MKSPECS_DIR ${TOOLS_ROOT}/qt/${QT_VERSION}/${MACHINE}/opt/mkspecs)
  
    #INCLUDE(${QT_INCLUDE_DIR})
    #LINK_DIRECTORIES(${QT_LIBRARY_DIR})
    
    #SET(Qt3_FOUND)
    
    #Inclusion de CORBA
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers)
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers/TAO)
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/corba/tao/${CORBA_VERSION}${MACHINE}/ACE_wrappers/TAO/orbsvcs)
  
    LINK_DIRECTORIES(${THIRDPARTY_ROOT}/corba/tao/${CORBA_VERSION}${MACHINE}/lib/${MACHINE}.mt/debug/shared)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT}/corba/tao/${CORBA_VERSION}${MACHINE}/lib/${MACHINE}.mt/gcc/opt/shared)
  
    #Inclusion de BOOST
    SET(Boost_INCLUDE_DIRS ${THIRDPARTY_ROOT}/boost/${BOOST_VERSION}/include)
    MESSAGE(STATUS "Boost_INCLUDE_DIRS : ${Boost_INCLUDE_DIRS}")
    SET(Boost_LIBRARY_DIRS ${THIRDPARTY_ROOT}/boost/${BOOST_VERSION}/lib/${MACHINE}/debug/shared)
    MESSAGE(STATUS "Boost_LIBRARY_DIRS : ${Boost_LIBRARY_DIRS}")  
    #SET(Boost_FOUND TRUE)

    #Inclusion de XERCES
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/xml/xerces/c++/${XERCES_VERSION}/${MACHINE}/include)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT}/xml/xerces/c++/${XERCES_VERSION}/${MACHINE}/lib)

    #Inclusion de CPPUNIT
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/cppunit/${CPPUNIT_VERSION}/include)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT}/cppunit/${CPPUNIT_VERSION}/lib/${MACHINE}/gcc/debug/shared)

    #Inclusion de ZLIB  
    #INCLUDE_DIRECTORIES(${DATABASE_ROOT}/3rd/tools/Cpp/zlib-1.2.3.vc7/include)
    #LINK_DIRECTORIES(${DATABASE_ROOT}/3rd/tools/Cpp/zlib-1.2.3.vc7/lib/${MACHINE}/opt/shared)

    #Inclusion de IDA 
    INCLUDE_DIRECTORIES(${DATABASE_ROOT}/ida/package/V${IDA_MAJOR_VERSION}/${IDA_VERSION}/include)
    LINK_DIRECTORIES(${DATABASE_ROOT}/ida/package/V${IDA_MAJOR_VERSION}/${IDA_VERSION}/lib/${MACHINE}/opt/shared)  
    #/database/release/ida/package/V2
              
    #Inclusion de LIBXML2
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/libxml2/2.7.2/winnt/include)
    #LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/libxml2/2.7.2/winnt/lib)  

    #Inclusion de ADFIN
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/adfin/${ADFIN_VERSION}/include)

    #Inclusion de KPLUS
    SET(KPLUS_ROOT ${THIRDPARTY_ROOT}/kondor/${KONDOR_VERSION})
    SET(ADFIN_ROOT ${THIRDPARTY_ROOT}/adfin/${ADFIN_VERSION})

    SET(KPLUS_INCLUDE_DIRS ${KPLUS_ROOT}/include)
    SET(ADFIN_INCLUDE_DIRS ${ADFIN_ROOT}/include)
    SET(KPLUS_LIB_DIRS ${KPLUS_ROOT}/lib/${MACHINE})
    SET(ADFIN_LIB_DIRS ${ADFIN_ROOT}/lib/${MACHINE})
  
    INCLUDE_DIRECTORIES(${KPLUS_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${ADFIN_INCLUDE_DIRS})
  
    LINK_DIRECTORIES(${KPLUS_LIB_DIRS}/debug/shared ${KPLUS_LIB_DIRS}/opt)
    LINK_DIRECTORIES(${ADFIN_LIB_DIRS}/debug/shared ${ADFIN_LIB_DIRS}/opt)

    #Inclusion de KML
    INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT}/KML/V1/${KML_VERSION}/include)
    LINK_DIRECTORIES(${THIRDPARTY_ROOT}/KML/V1/${KML_VERSION}/lib/${MACHINE}/opt/shared)
    
    #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/include)
  
    #Inclusion de DATABASE KONDOR
    #INCLUDE_DIRECTORIES(${DATABASE_ROOT}/products/kondor/${KONDOR_DATABASE_VERSION_MAIN}/${KONDOR_DATABASE_VERSION_UPRGRADE}/src/include)
    #LINK_DIRECTORIES(${DATABASE_ROOT}/products/kondor/${KONDOR_DATABASE_VERSION_MAIN}/${KONDOR_DATABASE_VERSION_UPRGRADE}/src/lib/${MACHINE}/opt/shared)
    #/rms/packages/kdb/3.0_upg97/lib

  ENDIF(CMAKE_HOST_SYSTEM_NAME MATCHES "SunOS")       
    
ELSE(UNIX)
  MESSAGE(STATUS "UNIX not found")
ENDIF(UNIX)

  #Inclusion de ENVIRONNEMENT
  LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})

  #Inclusion de TIBCO
  INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/include)
  LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/lib)
  
  #Inclusion de ELS
  ###INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/els${ELS_VERSION}/els_api/include)
  ###LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/els${ELS_VERSION}/els_api/libs/${MACHINE})

  #Inclusion de INFRAFA for KNEL
  ###INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infrafa/${INFRAFA_VERSION}/include)  
  ###LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infrafa/${INFRAFA_VERSION}/lib/${MACHINE}/opt/shared)
  #/infrafa/build/infra16/src

  #Inclusion de INFRA
  #INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/include)  
  #LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/opt)
  #LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/opt/shared)
  #LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/modules/pixl/opt/${MACHINE})
          
  #Inclusion de infrafa for FAKETAT
  ###INCLUDE_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infrafa/faketat/${INFRAFA_FAKETAT_VERSION}/include)  
  ###LINK_DIRECTORIES(${THIRDPARTY_ROOT_LOCAL}/infrafa/faketat/${INFRAFA_FAKETAT_VERSION}/P${INFRA_PACKAGE_VERSION}/lib/${MACHINE}/opt/shared)  

  #Inclusion de DATABASE KTPPLUS
  #LINK_DIRECTORIES(${DATABASE_ROOT}/products/ktpplus/3.0/V44/package/lib/${MACHINE}/debug/shared)
    
IF(CYGWIN)

  SET(BASECORBA ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libACE.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_AnyTypeCode.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_BiDirGIOP.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DynamicAny.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DynamicInterface.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IDL_BE.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IDL_FE.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFR_Client.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORManip.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORTable.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Messaging.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_PortableServer.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBA.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTPortableServer.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_SmartProxies.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Strategies.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_TypeCodeFactory.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Utils.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNaming_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Codeset.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libACE_ETCL.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libACE_ETCL_Parser.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libACE_Monitor_Control.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_AV.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CodecFactory.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Compression.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosConcurrency_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosEvent_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLifeCycle.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLifeCycle_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosLoadBalancing.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_MC.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_MC_Ext.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosNotification_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosProperty_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTime_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CosTrading_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CSD_Framework.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_CSD_ThreadPool.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DiffServPolicy.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsEventLogAdmin_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsLogAdmin_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_DsNotifyLogAdmin_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_EndpointPolicy.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ETCL.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FaultTolerance.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FT_ClientORB.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FT_ServerORB.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTORB_Utils.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTRT_ClientORB.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FTRT_EventChannel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_FtRtEvent.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFR_BE.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IFRService.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Activator_IDL.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Client.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ImR_Locator_IDL.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_IORInterceptor.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Monitor.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Notify_Service.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ObjRefTemplate.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_PI.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_PI_Server.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_PortableGroup.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ReplicationManagerLib.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RT_Notification.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBA.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTCORBAEvent.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEvent_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin_Serv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTEventLogAdmin_Skel.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTSched.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTSchedEvent.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_RTScheduler.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Security.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Svc_Utils.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_TC.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_TC_IIOP.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_TypeCodeFactory.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Utils.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_Valuetype.dll
                ${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libTAO_ZIOP.dll)
  
                #${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libUTF16_UCS2.dll  
                #${THIRDPARTY_ROOT_LOCAL}/tao/ACE_wrappers/lib/libDynServer.dll
                  
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")

  SET(BASECORBA ACE ACE_RMCast TAO TAO_BiDirGIOP TAO_DynamicAny TAO_DynamicInterface TAO_IDL_BE TAO_IDL_FE TAO_IFR_Client TAO_IORManip TAO_IORTable TAO_Messaging TAO_PortableServer TAO_RTCORBA TAO_RTPortableServer TAO_SmartProxies TAO_Strategies TAO_TypeCodeFactory TAO_Utils TAO_CosNaming TAO_Codeset)
                  
ENDIF(CYGWIN)
 
#MESSAGE(STATUS "BASECORBA : ${BASECORBA}")  

IF(CYGWIN)

  SET(BASETIBCO ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/libeay32.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/ssleay32.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrv.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcm.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcmq.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvcom.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvft.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvj.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvjsd.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvsd.dll
                ${THIRDPARTY_ROOT_LOCAL}/tibco/tibrv/${TIBCO_VERSION}/${MACHINE}/bin/tibrvsdcom.dll)
                
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  SET(BASETIBCO tibrv tibrvcm tibrvcmq tibrvft)
  
ENDIF(CYGWIN)
 
IF(CYGWIN)

  SET(BASEIDA KDBC_CT KDBCommon KDBC KDBType KDB KRDV)
  
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")

  SET(BASEIDA KDBC_CT${IDA_VERSION} KDBCommon${IDA_VERSION} KDBC${IDA_VERSION} KDBType${IDA_VERSION} KDB${IDA_VERSION} KRDV${IDA_VERSION})

ENDIF(CYGWIN)       
      
IF(CYGWIN)

  #ADD_LIBRARY(INFRACPPTOOLS SHARED IMPORTED)                                                                                                                   
  #SET_PROPERTY(TARGET INFRACPPTOOLS PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/infracpptools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll)
  #SET_PROPERTY(TARGET INFRACPPTOOLS PROPERTY IMPORTED_IMPLIB ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/infracpptools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.lib)
    
  ADD_LIBRARY(CFM STATIC IMPORTED)                                                                                                                   
  #SET_PROPERTY(TARGET CFM PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/x86Linux/debug/libcfm.a)
  SET_PROPERTY(TARGET CFM PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/cfm.lib)  
  ADD_LIBRARY(FXMSG STATIC IMPORTED)                                                                                                                   
  #SET_PROPERTY(TARGET FXMSG PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/x86Linux/debug/libFxMsg.a)
  SET_PROPERTY(TARGET FXMSG PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/FxMsg.lib)  
  #ADD_LIBRARY(ITH STATIC IMPORTED)                                                                                                                   
  #SET_PROPERTY(TARGET ITH PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/x86Linux/debug/libith.a)
  #SET_PROPERTY(TARGET ITH PROPERTY IMPORTED_LOCATION ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/ith.lib)  

  #SET(BASEINFRA ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/infracpptools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/infratools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/infratooltest${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kml05${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kmlconfig${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kmllog${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/pixl${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/ucontribpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/ucontribsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/udatapub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/udatashared${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/udatasub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/upermpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/usessionpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/usessionsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
  #              CFM FXMSG)
  
  #                infratooltest${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
  SET(BASEINFRA ${KPLUS_LIB_DIRS}/dependencies/infracpptools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/infratools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/pixl${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/ucontribpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/ucontribsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/udatapub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/udatashared${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/udatasub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/upermpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/usessionpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${KPLUS_LIB_DIRS}/dependencies/usessionsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}.dll
                ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kml${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER}.dll
                ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kmlconfig${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER}.dll
                ${THIRDPARTY_ROOT_LOCAL}/infra/common/${INFRA_VERSION}/lib/${MACHINE}/debug/shared/kmllog${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER}.dll)
                
   #SET(BASEINFRA ${KPLUS_LIB_DIRS}/dependencies/infratools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER}.dll)
   SET(BASEINFRA)
                   
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  SET(BASEINFRA externstaticdeps${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}
                infracpptools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER} 
                infratools${INFRA_VERSION_NUMBER2}${INFRA_VERSION_LETTER} 
                kml${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER} 
                kmlconfig${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER} 
                kmllog${INFRA_VERSION_NUMBER1}${INFRA_VERSION_LETTER} 
		pixl${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		ucontribpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		ucontribsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		udatapub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		udatashared${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		udatasub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		upermpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		usessionpub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER} 
		usessionsub${INFRA_VERSION_NUMBER3}${INFRA_VERSION_LETTER}
		posix4 pthread thread m socket nsl)  
   
ENDIF(CYGWIN)
      
IF(CYGWIN)

  SET(BASELIBXML2 ${THIRDPARTY_ROOT_LOCAL}/libxml2/2.7.2/winnt/lib/libxml2.dll
                  ${THIRDPARTY_ROOT_LOCAL}/libxml2/2.7.2/winnt/lib/libiconv2.dll)
                  
  SET(BASELIBXML2 ${LIBXML_LIBRARY_DIRS})
  
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")

  SET(BASELIBXML2 xml2)

ENDIF(CYGWIN)  

IF(CYGWIN)

  SET(BASEINFRAFA)
  
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  SET(BASEINFRAFA HAT${INFRAFA_VERSION_NUMBER} 
                  HATMethods${INFRAFA_VERSION_NUMBER} 
                  KMI${INFRAFA_VERSION_NUMBER} 
                  KMIMethods${INFRAFA_VERSION_NUMBER} 
                  KNEL${INFRAFA_VERSION_NUMBER} 
                  KTools${INFRAFA_VERSION_NUMBER})  
  
ENDIF(CYGWIN)

IF(CYGWIN)
        
  SET(BASESYBASE ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libct.dll
                 ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libcobct.dll
                 ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libcs.dll
                 ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libsybdb.dll
                 ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libxadtm.dll
                 ${THIRDPARTY_ROOT_LOCAL}/database/sybase/openclient/${SYBASE_SERVER_VERSION}/ESD_${SYBASE_ESD_VERSION}/${MACHINE}/dll/debug/libblk.dll)

ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  SET(BASESYBASE ct
                 cobct
                 cs
                 sybdb
                 xadtm
                 blk)  
  
ENDIF(CYGWIN)

IF(CYGWIN)

  SET(BASEORACLE /cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/BIN/oci.dll
                 /cygdrive/c/oraclexe/app/oracle/product/10.2.0/server/BIN/ociw32.dll)
                 
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  SET(BASEORACLE oci
                 ociw32)  
  
ENDIF(CYGWIN)

IF(CYGWIN)

  SET(BASEKTP KDBCHOICESCommonv30c01 
              KDBCHOICESKondor${KONDOR_DATABASE_VERSION}
              KDBGENCPPLOCAL2${KONDOR_DATABASE_VERSION}
              KDBGENCPPLOCAL1${KONDOR_DATABASE_VERSION}
              KDBGENCPPGLOBAL${KONDOR_DATABASE_VERSION}
              KDBGENCPPKUSTOM${KONDOR_DATABASE_VERSION}
              KDBGENCPPARCHIVE${KONDOR_DATABASE_VERSION}
              KDBGENCPPVERSION${KONDOR_DATABASE_VERSION}
              KDBGEN${KONDOR_DATABASE_VERSION} 
              KRDVGEN${KONDOR_DATABASE_VERSION})  
              
ELSE(CYGWIN)
  MESSAGE(STATUS "CYGWIN not found")
  
  #KDBCHOICESCommonv30c01 
  SET(BASEKTP KDBCHOICESCommon${KONDOR_DATABASE_VERSION}
              KDBCHOICESKondor${KONDOR_DATABASE_VERSION}
              KDBGENCPPLOCAL2${KONDOR_DATABASE_VERSION}
              KDBGENCPPLOCAL1${KONDOR_DATABASE_VERSION}
              KDBGENCPPGLOBAL${KONDOR_DATABASE_VERSION}
              KDBGENCPPKUSTOM${KONDOR_DATABASE_VERSION}
              KDBGENCPPARCHIVE${KONDOR_DATABASE_VERSION}
              KDBGENCPPVERSION${KONDOR_DATABASE_VERSION}
              KDBGEN${KONDOR_DATABASE_VERSION} 
              KRDVGEN${KONDOR_DATABASE_VERSION})
  
ENDIF(CYGWIN)

  #SET(BASEKDB KDBCHOICESCommonv30u55 KDBCHOICESKondorv30u55 KDBGENCPPLOCAL2v30u55 KDBGENCPPLOCAL1v30u55 KDBGENCPPGLOBALv30u55 KDBGENCPPKUSTOMv30u55 KDBGENCPPARCHIVEv30u55 KDBGENCPPVERSIONv30u55 KDBGENv30u55 KRDVGENv30u55)

  #elscpptk_pure_q832_104010059_32 elscpptools_pure_q832_104010059_32 elsctk_pure_q832_104010059_32 elsctools_pure_q832_104010059_32 elsseed_pure_q832_104010059_32
  SET(BASEELS elscpptk elscpptools elsctk elsctools elsseed)

  #SET(BASEKTP KTPCHOICESv30u20 KTPGENCPPv30u20 KTPRDVGENv30u20)
  #SET(BASEKPLUSTP KTPKDBTypes${KONDOR_DATABASE_VERSION} KTPCHOICES${KONDOR_DATABASE_VERSION} KTPGENCPPARCHIVE${KONDOR_DATABASE_VERSION} KTPGENCPP${KONDOR_DATABASE_VERSION} KTPRDVGEN${KONDOR_DATABASE_VERSION})
    
  SET(BASEKPLUSTP KTPCHOICES KTPGENCPP KTPRDVGEN) 
  #SET(BASEKPLUSTPARCH KTPGENCPPARCHIVE${KONDOR_DATABASE_VERSION})   

  SET(BASEXERCES xerces-c)

  SET(BASEKPLUS KINIT
                KOMM
                KTHREAD
                KRDVwatch
                KC
                dl
                qt-mt
                ith
                KFS
                KBATCH
                KOPENimpl
                KOTDealsDb
                KOTProvider
                KOTDynProvider
                KOTConvert
                KOTDeals
                KOTDealsLight
                KDEALSmodel
                KDEALSutils
                KOPENimpl
                KEXERCISE
                KSCHED
                KINFLATION
                KFINDEALSimpl
                KFINDEALS
                KOTTypes
                KOTServer
                KCORREL
                KVOLATcurves
                KVOLATengine
                KFIN
                KOTShared
                KOPEN
                KDEALSoperationsdb
                KSCHEDgenerator
                KSCHEDengine
                KPROBAcurves
                KURVE
                KURVEengine
                KURVEassign
                KUSTOM
                KOTTools
                KFINDEALS
                KFINMATH
                KFINTOOLS
                KPRICES
                KCALCONF
                KURVEdynamic
                KAccessRights
                KETAT
                KHL
                KELS
                KONDOR
                KPRINT
                KHLTOOLS
                KOMM
                KTHREAD
                KRDVwatch
                KDBTOOLS
                KDBUTILS
                KDATE
                KUICOMPONENTS
                KXV
                KQT
                FL3
                Serialize
                Loggers
                KCPP
                KRDVwatch
                KC
                KRYPTONcore
                Kew_Admin
                Kew_Session
                Kew
                KUSTOM_Config
                KDBUTILS
                KREPORTkbOpenReport
                XML
                xml2
	        AdfDef AdfApi AdfDef AdfStyle AdfBasic AdfMath AdfComp AdfRes AdfRand)

  SET(BASETOOL PropMgr MsgMgr Exception Utils XMLUtils DateTime ObjectMgr KTPKDBTypes LogMgr SchedulerMgr Digest Security KTPPlusThread CorbaMgr IDAUtils)

  #NettingDB ValidationDB
  SET(BASEDB ExceptionDB ObjectDB JoinDB DictAuditorDB EventDB QueryDB ChoicesDB DBMessage DBManager MsgGeneratorDB WorkflowDB CriteriaTableDB BOStaticDataDB BODealDB SessionDB)

  #ElsManager SessionHelper
  SET(BASESERVICE CommonIncludes 
                  BOStruct Workflow Communication Core Persistence ServiceUtils Validators
		  KtpKml
		  KMF KML KNEL KMLKtpAddon
		  KtpSecurity
		  RulesManager
		  DictAuditor
		  Attributes-corba-${PROJECT_TARGET}
		  AttributesHelper
		  Session-corba-${PROJECT_TARGET}
		  CommonCfgHelper)  
  
  SET(DICTMANAGER ConfigAPI 
                  Dictionary 
                  Elements 
                  DictManagerConstants DictManagerDataFields DictManagerExpressions 
                  DictManagerCompiler DictManagerXML 
                  DictManagerOperations DictManagerArithmetic DictManagerBranch DictManagerDate DictManagerOperatorDB DictManagerFinancial DictManagerGeneral DictManagerLogical DictManagerString DictManagerSystem
                  DictManagerHelper DictManagerStorage)

OPTION(WITH_GUI "Compil graphic unser interface" ON)

IF(WITH_GUI)
  MESSAGE(STATUS "Graphic user interface compilation activated")
  FIND_PACKAGE(X11)

  IF(X11_FOUND)
    MESSAGE(STATUS "X11 available")
    INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
  ELSE(X11_FOUND)
    MESSAGE(STATUS "X11 not found")
  ENDIF(X11_FOUND)

  #FIND_PACKAGE(Qt3)

  #IF(Qt3_FOUND)
  #  MESSAGE(STATUS "Qt3 available")
  #  INCLUDE(${QT_USE_FILE})
  #  INCLUDE_DIRECTORIES(${QT_INCLUDES})
  #ELSE(Qt3_FOUND)
  #  MESSAGE(STATUS "Qt3 not found")
  #ENDIF(Qt3_FOUND)

ENDIF(WITH_GUI)

FIND_PACKAGE(ZLIB REQUIRED)

IF(ZLIB_FOUND)
  MESSAGE(STATUS "ZLIB available")
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
  LINK_DIRECTORIES(${ZLIB_LIBRARY_DIRS})
ELSE(ZLIB_FOUND)
  MESSAGE(STATUS "ZLIB not found")
ENDIF(ZLIB_FOUND)

#FIND_PACKAGE(
#	Boost 
#	1.31.0
#	REQUIRED signals
#)

FIND_PACKAGE(
	Boost
)

#ADD_DEFINITIONS("-pthread")

IF(Boost_FOUND)
  MESSAGE(STATUS "Boost available")
  SET(Boost_USE_STATIC_LIBS OFF)
  SET(Boost_USE_MULTITHREAD ON)
  #SET(Boost_LIBRARIES boost_thread)

  MESSAGE(STATUS "${Boost_LIBRARIES}")

  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ELSE(Boost_FOUND)
  MESSAGE(STATUS "Boost not found")

ENDIF(Boost_FOUND)

FIND_PACKAGE(LibXml2 REQUIRED)

IF(LIBXML2_FOUND)
  MESSAGE(STATUS "LIBXML2 available")
  INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
  LINK_DIRECTORIES(${LIBXML2_LIBRARY_DIRS})
ELSE(LIBXML2_FOUND)
  MESSAGE(STATUS "LIBXML2 not found")
ENDIF(LIBXML2_FOUND)

OPTION( ENABLE_CORBA "Enable CORBA" ON)

INCLUDE(${PROJECT_SOURCE_DIR}/config/FindTAO.cmake)

IF(FOUND_TAO)
  MESSAGE(STATUS "TAO available")
  MESSAGE(STATUS " dans ${TAO_DIR} et ${ACE_DIR}")

  ADD_DEFINITIONS(${CORBA_CFLAGS} -DuseTao -D_TEMPLATES_ENABLE_ -D_REENTRANT)
ELSE(FOUND_TAO)
  MESSAGE(STATUS "TAO not found")
ENDIF(FOUND_TAO)
  
IF (MINGW)
  MESSAGE(STATUS "JNI not searched")
ELSE(MINGW)
  #INCLUDE(FindJNI)
  #MESSAGE(STATUS " JAVA dans ${JAVA_JVM_LIBRARY_DIR} et ${JNI_INCLUDE_DIRS}")
  
  #INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
  #INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})
  
  #LINK_DIRECTORIES(${JNI_LIBRARIES})
ENDIF(MINGW)

OPTION(BUILD_REFERENCE_DOCS "Build Project reference documentation using doxygen (use: make DoxygenDoc)" ON)

IF(BUILD_REFERENCE_DOCS)
    SET(BUILD_DOCUMENTATION YES)
    OPTION(DOCUMENTATION_SEARCHENGINE "Enable doxygen's search engine (requires that documentation to be installed on a php enabled web server)" ON)
    OPTION(DOCUMENTATION_TAGFILE "Generate a tag file named project.tag on the documentation web server" ON)
ENDIF(BUILD_REFERENCE_DOCS)

#Generation of the documentation using doxygen
#FIND_PATH(DOXYGEN_DIR doxygen
#/usr/local/bin
#/usr/bin
#)
FIND_PACKAGE(Doxygen)

SET(EXCLUDE Unittest)
SET(EXCLUDE_PATTERNS */*Unittest*/* )

#http://www.graphviz.org/

IF (DOXYGEN_FOUND)

  # click+jump in Emacs and Visual Studio (for doxy.config) (jw)
  IF    (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")
    SET(DOXY_WARN_FORMAT "\"$file($line) : $text \"")
  ELSE  (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")
    SET(DOXY_WARN_FORMAT "\"$file:$line: $text \"")
  ENDIF (CMAKE_BUILD_TOOL MATCHES "(msdev|devenv)")
  
  # we need latex for doxygen because of the formulas
  FIND_PACKAGE(LATEX)
  IF    (NOT LATEX_COMPILER)
    MESSAGE(STATUS "latex command LATEX_COMPILER not found but usually required. You will probably get warnings and user inetraction on doxy run.")
  ENDIF (NOT LATEX_COMPILER)
  IF    (NOT MAKEINDEX_COMPILER)
    MESSAGE(STATUS "makeindex command MAKEINDEX_COMPILER not found but usually required.")
  ENDIF (NOT MAKEINDEX_COMPILER)
  IF    (NOT DVIPS_CONVERTER)
    MESSAGE(STATUS "dvips command DVIPS_CONVERTER not found but usually required.")
  ENDIF (NOT DVIPS_CONVERTER)
  
  # For Doxygen
  INCLUDE(${CMAKE_ROOT}/Modules/Documentation.cmake OPTIONAL)
  OPTION(BUILD_DOCUMENTATION "Build osg documentation" ON)
  # To build the documention, you will have to enable it
  # and then do the equivalent of "make DoxygenDoc".
  IF(BUILD_DOCUMENTATION)
    SET(BUILD_DOCUMENTATION YES)
    IF(DOCUMENTATION_SEARCHENGINE)
        SET(SEARCHENGINE "YES")
    ELSE(DOCUMENTATION_SEARCHENGINE)
        SET(SEARCHENGINE "NO")
    ENDIF(DOCUMENTATION_SEARCHENGINE)
    IF(DOCUMENTATION_TAGFILE)
        SET(GENERATE_TAGFILE "doc/Project.tag")
    ELSE(DOCUMENTATION_TAGFILE)
        SET(GENERATE_TAGFILE "")
    ENDIF(DOCUMENTATION_TAGFILE)
    IF(DOT)
        SET(HAVE_DOT YES)
    ELSE(DOT)
        MESSAGE(STATUS "d0t command not found but usually required.")    
        SET(HAVE_DOT NO)
    ENDIF(DOT)
  ENDIF(BUILD_DOCUMENTATION)

  #CMAKE_CURRENT_SOURCE_DIR --> PROJECT_SOURCE_DIR 
  IF   (EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config.in")
    MESSAGE(STATUS "configured ${PROJECT_SOURCE_DIR}/config/doxy.config.in --> ${CMAKE_CURRENT_BINARY_DIR}/doxy.config")
    #CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config/doxy.config.in 
    #  ${CMAKE_CURRENT_BINARY_DIR}/doxy.config
    #  @ONLY )
    ## use (configured) doxy.config from (out of place) BUILD tree:
    SET(DOXY_CONFIG "${CMAKE_CURRENT_BINARY_DIR}/doxy.config")
  ELSE (EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config.in")
    # use static hand-edited doxy.config from SOURCE tree:
    SET(DOXY_CONFIG "${PROJECT_SOURCE_DIR}/config/doxy.config")
    IF   (EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config")
      MESSAGE(STATUS "WARNING: using existing ${PROJECT_SOURCE_DIR}/config/doxy.config instead of configuring from doxy.config.in file.")
    ELSE (EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config")
      IF   (EXISTS "${CMAKE_MODULE_PATH}/doxy.config.in")
        # using template doxy.config.in
        MESSAGE(STATUS "configured ${CMAKE_CMAKE_MODULE_PATH}/doxy.config.in --> ${CMAKE_CURRENT_BINARY_DIR}/doxy.config")
        CONFIGURE_FILE(${CMAKE_MODULE_PATH}/doxy.config.in 
          ${CMAKE_CURRENT_BINARY_DIR}/doxy.config
          @ONLY )
        SET(DOXY_CONFIG "${CMAKE_CURRENT_BINARY_DIR}/doxy.config")
      ELSE (EXISTS "${CMAKE_MODULE_PATH}/doxy.config.in")
        # failed completely...
        MESSAGE(SEND_ERROR "Please create ${PROJECT_SOURCE_DIR}/config/doxy.config.in (or doxy.config as fallback)")
      ENDIF(EXISTS "${CMAKE_MODULE_PATH}/doxy.config.in")

    ENDIF(EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config")
  ENDIF(EXISTS "${PROJECT_SOURCE_DIR}/config/doxy.config.in")
  
  ADD_CUSTOM_TARGET(DoxygenDoc ${DOXYGEN_EXECUTABLE} ${DOXY_CONFIG})
  
  # create a windows help .chm file using hhc.exe
  # HTMLHelp DLL must be in path!
  # fallback: use hhw.exe interactively
  IF    (WIN32)
    FIND_PACKAGE(HTMLHelp)
    IF   (HTML_HELP_COMPILER)      
      SET (TMP "${CMAKE_CURRENT_BINARY_DIR}\\doc\\html\\index.hhp")
      STRING(REGEX REPLACE "[/]" "\\\\" HHP_FILE ${TMP} )
      # MESSAGE(SEND_ERROR "DBG  HHP_FILE=${HHP_FILE}")
      ADD_CUSTOM_TARGET(winhelp ${HTML_HELP_COMPILER} ${HHP_FILE})
      ADD_DEPENDENCIES (winhelp doc)
     
      IF (NOT TARGET_DOC_SKIP_INSTALL)
      # install windows help?
      # determine useful name for output file 
      # should be project and version unique to allow installing 
      # multiple projects into one global directory      
      IF   (EXISTS "${PROJECT_BINARY_DIR}/doc/html/index.chm")
        IF   (PROJECT_NAME)
          SET(OUT "${PROJECT_NAME}")
        ELSE (PROJECT_NAME)
          SET(OUT "Documentation") # default
        ENDIF(PROJECT_NAME)
        IF   (${PROJECT_NAME}_VERSION_MAJOR)
          SET(OUT "${OUT}-${${PROJECT_NAME}_VERSION_MAJOR}")
          IF   (${PROJECT_NAME}_VERSION_MINOR)
            SET(OUT  "${OUT}.${${PROJECT_NAME}_VERSION_MINOR}")
            IF   (${PROJECT_NAME}_VERSION_PATCH)
              SET(OUT "${OUT}.${${PROJECT_NAME}_VERSION_PATCH}")      
            ENDIF(${PROJECT_NAME}_VERSION_PATCH)
          ENDIF(${PROJECT_NAME}_VERSION_MINOR)
        ENDIF(${PROJECT_NAME}_VERSION_MAJOR)
        # keep suffix
        SET(OUT  "${OUT}.chm")
        
        #MESSAGE("DBG ${PROJECT_BINARY_DIR}/doc/html/index.chm \n${OUT}")
        # create target used by install and package commands 
        INSTALL(FILES "${PROJECT_SOURCE_DIR}/fullsite/site-deploy/doc/html/index.chm"
          DESTINATION "doc"
          RENAME "${OUT}"
        )
      ENDIF(EXISTS "${PROJECT_BINARY_DIR}/doc/html/index.chm")
      ENDIF(NOT TARGET_DOC_SKIP_INSTALL)

    ENDIF(HTML_HELP_COMPILER)
    # MESSAGE(SEND_ERROR "HTML_HELP_COMPILER=${HTML_HELP_COMPILER}")
  ENDIF (WIN32) 
ELSE (DOXYGEN_FOUND)
  MESSAGE(STATUS "DOXYGEN not found")
ENDIF(DOXYGEN_FOUND)

ENABLE_TESTING()
INCLUDE(${PROJECT_SOURCE_DIR}/config/CTestConfig.cmake)
INCLUDE(Dart)
IF(CMAKE_COMPILER_IS_GNUCXX AND NOT BUILD_SHARED_LIBS)
  SET(CMAKE_CXX_FLAGS "-fprofile-arcs -ftest-coverage")
ENDIF(CMAKE_COMPILER_IS_GNUCXX AND NOT BUILD_SHARED_LIBS)

INCLUDE(InstallRequiredSystemLibraries)

SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})

IF(WIN32 AND NOT UNIX)
  SET(CPACK_NSIS_MODIFY_PATH ON)
ELSE(WIN32 AND NOT UNIX)
  SET(CPACK_STRIP_FILES "")
  SET(CPACK_SOURCE_STRIP_FILES "")
ENDIF(WIN32 AND NOT UNIX)
#SET(CPACK_PACKAGE_EXECUTABLES "Tools" "Tools")

INCLUDE(CPack)
