<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>
            Lutèce : Guide de développement : Les LinkServices
        </title>
    </properties>
    <body>
        <section name="Créer un nouveau LinkService">
            <subsection name="Arborescence des InsertService">
                <p>
                    Un plugin qui propose un service d’insertion de code HTML ou  
                    un service d’insertion de lien va devoir implémenter une 
                    interface <code>HtmlService</code> ou <code>LinkService</code>.
                    <center>
                        <img src="images/linkservice.gif" />
                    </center>
                    L’arborescence des InsertService est constituée comme suit :
                </p>
                <p>
                    <ul>

                        <li>
                             une interface ancêtre généralisant la notion de InsertService 
                             et fournissant une méthode abstraite <code>getSelectorUI</code> donnant 
                             accès à une IHM de sélection de l’objet à insérer ;
                        </li>
                        <li>
                             une interface <code>LinkService</code> modélisant les 
                             Services d’insertion de liens et fournissant une méthode 
                             retournant une classe de sélection implémentant 
                             <code>LinkServiceSelectionBean</code> ;
                        </li>
                        <li>
                             une interface <code>HtmlService</code> modélisant les 
                             Services d’insertion de code HTML et fournissant une 
                             méthode retournant une classe de sélection implémentant 
                             <code>HtmlServiceSelectionBean</code> ;
                        </li>
                        <li>
                             des classes abstraites, <code>DefaultLinkService</code> 
                             et <code>DefaultHtmlService</code>, facilitant l’implémentations 
                             des 2 interfaces ci dessus.
                        </li>
                    </ul>
                </p>
                <p>
                    Note : un plugin peut proposer à la fois un LinkService et un HtmlService ;
                </p>
            </subsection>
            <subsection name="Service d’enregistrement">
                <p>
                    Le service concernant deux fonctionnalités très similaires, 
                    nous avons donc décidé de ne créer qu’un seul service 
                    d’enregistrement : InsertServiceManager.
                </p>
                <p>
                    Des méthodes sont fournies pour récupérer séparément les 
                    « HtmlService » ou les « LinkService » ou tous les InsertService.
                </p>
            </subsection>
            <subsection name="Interface de sélection d’un lien">
                <p>
                    Comme dans la version 1.0 de Lutece, la sélection de liens ou 
                    d’objet à insérer dans un éditeur HTML se fait via une fenêtre 
                    de type popup[1].
                </p>
                <p>
                    Cela permet d’une part de ne pas perdre l’utilisateur et d’autre 
                    part de ne pas avoir à gérer la persistance des données saisies 
                    dans l’appelant (sauvegarde des données non enregistrées dans 
                    l’éditeur HTML avant l’appel de la fonction d’insertion).
                </p>
            </subsection>
            <subsection name="Insertion du code retour">
                <p>
                    L’implémentation est conditionnée par le choix précédent et la 
                    volonté de ne pas se soucier de la mémorisation des données 
                    saisies dans l’appelant.
                </p>
                <p>
                    L’insertion du code HTML correspondant à l’objet sélectionné se 
                    fait directement via une fonction javascript que doit proposer l’appelant :
                </p>
                <p>
                    <code>insert_html (String ChaineAInsérer)</code>.
                </p>
            </subsection>
            <subsection name="Enregistrement des services">
                <p>
                    L’enregistrement des implémentations de InsertService est effectué 
                    au lancement de l’application lors du chargement des plugins. 

                    Il s’agit d’ajouter une section &lt;html-service&gt; (link-service) 
                    dans le fichier de configuration du plugin :
                </p>    
                <p>    
                    <div class="source">
                        <pre>
&lt;!-- Links Service --&gt;
&lt;link-service&gt;
    &lt;link-service-id&gt;mylinkservice&lt;/link-service-id&gt;
    &lt;link-service-class&gt;fr.paris.lutece.plugins.mylinkservice.service.MyLinkService&lt;/link-service-class&gt;
    &lt;link-service-bean-class&gt;fr.paris.lutece.plugins.mylinkservice.web.MyLinkServiceJspBean&lt;/link-service-bean-class&gt;
    &lt;link-service-label&gt;Link to my URIs&lt;/link-service-label&gt;
&lt;/link-service&gt;    </pre>
                    </div>
                </p>
            </subsection>
            <subsection name="Dérivation de DefaultHTMLService (ou DefaultLinkService)">
                <p>
                    Dériver <code>DefaultHTMLService</code> (resp. DefaultLinkService) 
                    en implémentant la méthode <code>getPluginName</code> :
                </p>
                <p>
                    <div class="source">
                        <pre>
public class MyHtmlService extends DefaultHtmlService 
{
    /** The plugin name. */
    private static final String PLUGIN_NAME = "myhtmlservice";

    public String getPluginName() 
    {
        return PLUGIN_NAME;
    }
}
                        </pre>
                    </div>
                </p>
            </subsection>

 
            <subsection name="Implémentation de HtmlServiceSelectionBean (ou LinkServiceSelectionBean)">
                <p>
                    Il s’agit de fournir un JSPBean qui implémente l’interface HtmlServiceSelectionBean en proposant une méthode getHtmlSelectorUI(), retournant une IHM permettant de sélectionner l’objet à insérer .
                </p>
                <p>
                    exemple de <code>ImageLibraryJspBean</code> pour le plugin ImageLibrary.
                </p>
            </subsection>
            <subsection name="Insertion du code HTML">
                <p>
                    le copier collage du code HTML à insérer se fera en javascript 
                    en appelant la méthode <code>opener.insert_html(strCodeHTMLAInserer)</code>.
                </p>
                <p>
                    Exemple issu de l’imageLibrary :
                </p>
                <p>
                    <div class="source">
                        <pre>
...
_buffer = _buffer + _hspace + _vspace + _width + _height + _align + ">";

if (opener != null)
{
   // The caller must provide an insert_html method
   opener.insert_html(_buffer);
   window.close();
} 
else 
{
   alert("Editeur HTML indisponible !" );
}
                        </pre>
                    </div>
                </p>
            </subsection>
 
            <subsection name="Utilisation d’un service">
                <p>
                    Un exemple d’utilisation des InsertService est donné par le plugin HTML, 
                    par l’intermédiaire du template <code>editor_portlet_html.html</code>.
                </p>
            </subsection>
            <subsection name="Proposer un lien vers le service d’insertion">
                <p>
                    Il s’agit d’appeler la JSP <code>GetAvailableServices.jsp</code>, 
                    en utilisant par exemple le code suivant :
                </p>
                <p> 
                    <div class="source">
                        <pre>
function create_insert_window()
{
   var url="GetAvailableServices.jsp";
   var nom = "Lien ou code HTML";
   child = window.open(url,'','toolbar=no, scrollbars=yes, status=no, location=no, directories=no, menubar=no, width=450, height=350');
   child.focus();
}

&lt;a href="#" onClick="create_insert_window();"&gt;Insérer Lien ou HTML&lt;/a&gt;
                        </pre>
                    </div>
                </p>
            </subsection>

            <subsection name="Fournir une méthode javascript insert_html()">
                <p>
                    Il s’agit de fournir, dans la page appelant le service d’insertion, 
                    une fonction javascript <code>insert_html</code> réalisant 
                    l’ajout du code HTML retourné par le service d’insertion.
                </p>
                <p>
                    exemple pour le HTML portlet :
                </p>
                <p>
                    <div class="source">
                        <pre>
function insert_html(strHTMLToInsert)

{
   //TEXT
   document.Form.html_content.value = document.Form.html_content.value + strHTMLToInsert;

   //HTML
   theDoc.innerHTML=theDoc.innerHTML+ strHTMLToInsert;
}
                        </pre>
                    </div>
                </p>
            </subsection>
        </section>
    </body>
</document>
