<?xml version="1.0" encoding="UTF-8"?>
  <document>
      <properties>
          <title>
              Lutèce : Guide de développement : Resource Service
          </title>
      </properties>
      <body>
          <section name="Services de chargement des resources pour les applications">

              <subsection name="Objectifs">
                  <p>
                      Lutece propose une implémentation de base pour des services internes
                      aux applications leur permettant de charger leurs resources. 
                      Par exemple, le plugin calendar gère des agendas et dispose d'un service
                      <code>AgendaService</code> qui permet de charger une resource, en l'occurence
                      ici d'un agenda, à partir de son identifiant.
                  </p>
                  <p>
                      Les objectifs de l'implémentation de base appelée <em>Resource Service</em> sont de fournir :
                 </p>
                 <p>
                      <ul>
                          <li>
                              une couche d'abstraction par rapport au mode de chargement
                              des resources. Celles-ci peuvent être chargées à partir de fichiers, d'une base
                              de données ou autre. Chaque dispositif de chargement correspond à une
                              implémentation de l'interface <code>ResourceLoader</code>. Il est possible
                              de combiner plusieurs dispositifs de chargement.
                          </li>
                          <li>
                              un système de cache intégré pour optimiser l'accès aux ressources. 
                              Le cache de chaque service est administrable à partir de la fonctionnalité
                              <em>Gestion des caches</em> de Lutèce.
                          </li>
                          <li>
                              des facilités de configuration du service ( nom , activation du cache, ...)
                              basées sur le fichier properties de l'application.
                          </li>
                      </ul>
                  </p>
                  <p>
                        Voici le diagramme de classes de l'API :
                  </p>
                  <p>
                      <center>
                          <img src="images/resource_service.gif" />
                      </center>
                  </p>
              </subsection>
              <subsection name="Implémentation d'un ResourceService" >
                  <p>
                      Voici l'implémentation minimale d'un service sous la forme d'un <em>singleton</em>em>.
                  </p>
                  <p>
                 <div class="source">
                   <pre>
public class MyResourceService extends ResourceService
{
    private static MyResourceService _singleton = new MyResourceService
    private static final String PROPERTY_NAME = "myplugin.service.name";
    private static final String PROPERTY_CACHE = "myplugin.service.cache";
    private static final String PROPERTY_LOADERS = "myplugin.service.loaders";

    /**
     * Private constructor
     */
    private MyResourceService
    {
        super();
        setCacheKey( PROPERTY_CACHE );
        setNameKey( PROPERTY_NAME );
    }

    /**
     * Returns the instance of the singleton
     *
     * @return The instance of the singleton
     */
    public static MyResourceService getInstance()
    {
        return _singleton;
    }

    /**
     * Returns the property key that contains the loaders list
     * @return A property key
     */
    protected String getLoadersProperty(  )
    {
        return PROPERTY_LOADERS;
    }

    /**
     * Returns the Resource corresponding to the given name
     *
     * @param strResourceName The resource name
     * @return the Resource corresponding to the given name
     */
    public MyResource getMyResource( String strResourceName )
    {
        return  ( MyResource ) getResource( strResourceName );
    }
              </pre>
                  </div>
                  </p>
                  <p>
                      La configuration du service se fait dans le fichier properties.
                      Les valeurs de base à configurer sont :
                  </p>
                  <p>
                      <table>
                          <tr>
                              <th>Elément de configuration</th>
                              <th>Exemple dans le fichier properties</th>
                          </tr>
                          <tr>
                              <td>Nom du service</td>
                              <td><code>myplugin.service.name=Plugin MyPlugin - MyResources Loading Service</code></td>
                          </tr>
                          <tr>
                              <td>Activation du cache</td>
                              <td><code>myplugin.service.cache=true</code></td>
                          </tr>
                          <tr>
                              <td>Liste des loaders</td>
                              <td><code>myplugin.service.loaders=com.mycompany.myapp.service.MyResourceLoader</code></td>
                          </tr>
                      </table>
                  </p>
              </subsection>
              <subsection name="Implémentation d'un ResourceLoader">
                  <p>
                      L'implémentation minimum d'un <code>ResourceLoader</code> est la suivante :
                  </p>
                  <p>
                      <div class="source">
                          <pre>
import fr.paris.lutece.portal.service.resource.Resource;
import fr.paris.lutece.portal.service.resource.ResourceLoader;

import java.util.ArrayList;

/**
 * MyResourceLoader
 */
public class MyResourceLoader implements ResourceLoader
{

    /**
     * Implementation of the ResourceLoader interface
     * @return A collection of resources
     */
    public Collection getResources(  )
    {
        // Build a collection of all resources available by this loader
        ArrayList listResources = new ArrayList(  );
        ...
        return listResources
    }

    /**
     * Implementation of the ResourceLoader interface
     * @param strId The resource Id
     * @return The Resource
     */
    public Resource getResource( String strId )
    {
        ...
    }
}                          </pre>
                      </div>
                  </p>
              </subsection>
              <subsection name="Gestion centralisée des caches">
                 <p>
                     Voici la vue de la gestion centralisée des caches du module d'Administration de Lutece
                     incluant ceux des Resources Services.
                 </p>    
                 <p>
                      <center>
                          <img src="images/manage_caches.gif" />
                      </center>
                  </p>
              </subsection>
          </section>
      </body>
  </document>
