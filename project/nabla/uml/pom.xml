<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

        <parent>
	    <groupId>com.nabla.project.nabla</groupId>
	    <artifactId>nabla</artifactId>
	    <version>1.0</version>
        </parent>

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.nabla.project.nabla.uml</groupId>
	<artifactId>uml</artifactId>
	<packaging>pom</packaging>
	<version>1.0</version>
	<name>Nabla UML</name>
	<description>Parent of all MDA-related modules.</description>

	<modules>
		<module>sample</module>
	</modules>

   <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.andromda</groupId>
                <artifactId>andromda-core</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.andromda.translationlibraries</groupId>
                <artifactId>andromda-ocl-translation-core</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.andromda.translationlibraries</groupId>
                <artifactId>andromda-ocl-validation-library</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.andromda.translationlibraries</groupId>
                <artifactId>andromda-ocl-query-library</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
                <exclusions>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
		<dependency>
			<groupId>org.andromda.profiles.uml14</groupId>
			<artifactId>andromda-profile</artifactId>
			<version>${andromda.version}</version>
		</dependency>            
            <!-- This dependency provides the ability to implement your
                  business logic in an interpreted manner during development on
                  your local machine -->
            <dependency>
                <groupId>org.andromda</groupId>
                <artifactId>andromda-script-wrappers</artifactId>
                <version>${andromda.version}</version>
                <scope>runtime</scope>
            </dependency>          
        </dependencies>
    </dependencyManagement>
    
	<dependencies>
                <!-- andromda-profile is used to load uml14 -->
		<dependency>
			<groupId>org.andromda.profiles.uml14</groupId>
			<artifactId>andromda-profile</artifactId>
			<version>${andromda.version}</version>
			<type>xml.zip</type>
			<scope>runtime</scope>
		</dependency>	
		<dependency>
			<groupId>org.andromda</groupId>
			<artifactId>andromda-script-wrappers</artifactId>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>groovy</groupId>
					<artifactId>groovy-all-1.0-jsr</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
<!--
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${commons.beanutils.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>${commons.collections.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons.lang.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>${commons.logging.version}</version>
		</dependency>
		<dependency>
			<groupId>jboss</groupId>
			<artifactId>jboss-j2ee</artifactId>
			<version>${jboss-j2ee.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate</artifactId>
			<version>${hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${ehcache.version}</version>
		</dependency>
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>${aopalliance.version}</version>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>${antlr.version}</version>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-digester</groupId>
			<artifactId>commons-digester</artifactId>
			<version>${commons.digester.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-validator</groupId>
			<artifactId>commons-validator</artifactId>
			<version>${commons.validator.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${commons.fileupload.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>${itext.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>${taglibs.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>oro</groupId>
			<artifactId>oro</artifactId>
			<version>${oro.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>
-->		
	</dependencies>

	<build>
	    <pluginManagement>
	    <plugins>
				<plugin>
					<groupId>org.andromda.maven.plugins</groupId>
					<artifactId>andromda-multi-source-plugin</artifactId>
					<version>${andromda.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>add-source</goal>
							</goals>
							<configuration>
								<sourceDirectories>
									<directory>${maven.build.src}/main/java</directory>
									<directory>${maven.build.src}/main/resources</directory>
									<directory>${maven.build.src}/main/dictionaries</directory>
									<directory>${maven.build.src}/main/xml</directory>
								</sourceDirectories>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.andromda.maven.plugins</groupId>
					<artifactId>andromda-maven-plugin</artifactId>
					<version>${andromda.version}</version>
				</plugin>
				<plugin>
					<groupId>org.andromda.maven.plugins</groupId>
					<artifactId>andromdapp-maven-plugin</artifactId>
					<version>${andromda.version}</version>
					<!--
						provides the injection of the script wrapper support into the
						class files (this should only be done when developing locally),
						uncomment this executions element to enable <executions>
						<execution> <id>instrument-scripts</id> <goals>
						<goal>instrument-scripts</goal> </goals> </execution>
						</executions>
					-->
					<configuration>
						<scriptWrapper>org.andromda.scriptwrappers.GroovyScriptWrapper</scriptWrapper>
						<locations>
							<location>
								<rootPath>${project.basedir}/src/main/java</rootPath>
								<!--
									adjust these to include or exclude specific files, by default
									all files found in the rootPath are considered <includes>
									<include>relative/path/to/file/to/include/SomeClass.java</include>
									</includes> <excludes>
									<exclude>relative/path/to/file/to/include/SomeClass.java</exclude>
									</excludes>
								-->
							</location>
						</locations>
					</configuration>
				</plugin>
               </plugins>
           </pluginManagement>
                        
           <plugins>			           
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>            
                            <artifactId>maven-clean-plugin</artifactId>
                            <version>${maven.clean.plugin.version}</version>
                            <configuration>
                                <filesets>
                                    <fileset>
                                        <directory>${project.basedir}</directory>
                                        <includes>
                                            <include>*.log</include>
                                            <include>**/*.exc</include>
                                            <include>**/*.bak</include>
                                        </includes>
                                        <excludes>
                                            <!-- Allow mvn clean install > install.log -->
                                            <exclude>build.log</exclude>
                                            <exclude>install.log</exclude>
                                            <exclude>andromda.log</exclude>                                            
                                            <exclude>server.log</exclude> 
                                        </excludes>
                                        <followSymlinks>false</followSymlinks>
                                    </fileset>
                                </filesets>
                            </configuration>
                        </plugin>     
          </plugins>
	</build>

	<properties>
		<mda.sourceDirectory>${project.basedir}</mda.sourceDirectory>		
		<!-- Check model dates vs output file dates from previous gen, skip if files are later -->
		<lastModifiedCheck>false</lastModifiedCheck>

		<mda.username>${product.username}</mda.username>
		<mda.workspace>${mda.username}${product.major.version}</mda.workspace>

		<jboss.home>${env.JBOSS_HOME}</jboss.home>
		<!--<jdbc.driver>org.apache.commons.dbcp.BasicDataSource</jdbc.driver>-->
		<jdbc.nabla.url>${jdbc.url}</jdbc.nabla.url>
		<jdbc.nabla.username>${database.name}</jdbc.nabla.username>
		<jdbc.nabla.password>${database.name}</jdbc.nabla.password>

		<maven.repo.local>${env.M2_REPO}</maven.repo.local>

		<src.dir>${pom.basedir}/src</src.dir>
		<!-- used for facades and facade-logics in andromda.xml -->
		<java.src.dir>${pom.basedir}/src/main/java</java.src.dir> <!-- used for facade-logic-impls in andromda.xml -->
		<test.src.dir>${pom.basedir}/src/test</test.src.dir>
		<!--
			used for mergeMappingsUri
			file:${test.src.dir}/mappings/MergeMappings.xml in
			karma-cardtridge\conf\test\andromda.xml
		-->
		<test.output.dir>${pom.basedir}/target/cartridge-test/actual</test.output.dir>
		<!--
			used for mergeMappingsUri
			file:${test.src.dir}/mappings/MergeMappings.xml in
			karma-cardtridge\conf\test\andromda.xml
		-->

		<nabla.mda.profiles.dir>/cartridges/dev-cartridges/profiles/${uml.type}</nabla.mda.profiles.dir>
		<nabla.mda.entities.dir>/common/nabla-entities/model/src/main/uml/${uml.type}</nabla.mda.entities.dir>
		<nabla.mda.valueobjects.dir>/common/nabla-valueobjects/model/src/uml/${uml.type}</nabla.mda.valueobjects.dir>

		<!--<maven.andromda.model.uri>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/${model.name}.xml.zip!/${model.name}.xml</maven.andromda.model.uri>
		<maven.andromda.model.uri>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/${model.name}.uml</maven.andromda.model.uri>-->
		<!--
		<maven.andromda.model.uri.no.manageables>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/no-manageables/${model.name}.xml.zip!/${model.name}.xml</maven.andromda.model.uri.no.manageables>
		<maven.andromda.model.uri.no.validables>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/no-validables/${model.name}.xml.zip!/${model.name}.xml</maven.andromda.model.uri.no.validables>
		-->
		<!--
		<maven.andromda.model.uri.no.manageables>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/${model.name}.xml.zip!/${model.name}.xml</maven.andromda.model.uri.no.manageables>
		<maven.andromda.model.uri.no.validables>jar:file:${pom.basedir}/../model/src/main/uml/${uml.type}/${model.name}.xml.zip!/${model.name}.xml</maven.andromda.model.uri.no.validables>
		-->
		<validation>true</validation>
		<cartridge.filter></cartridge.filter>
		<conf.dir>${pom.basedir}/src/main/config</conf.dir>
		<nabla.mda.dir>${pom.basedir}/../../..</nabla.mda.dir>
		<configuration.mda.dir>${nabla.mda.dir}/configuration</configuration.mda.dir>
		<manual.mappings.location>${nabla.mda.dir}/configuration/generation/manualMapping</manual.mappings.location>
		<merge.templates.location>${configuration.mda.dir}/generation/merges</merge.templates.location>
		<merge.mappings.spring>file:${merge.templates.location}/SpringMergeMappings.xml</merge.mappings.spring>
		<merge.mappings.hibernate>file:${merge.templates.location}/HibernateMergeMappings.xml</merge.mappings.hibernate>
		<merge.mappings.bo.karma>file:${merge.templates.location}/businessobjects/KarmaMergeMappings.xml</merge.mappings.bo.karma>
		<merge.mappings.rules.karma>file:${merge.templates.location}/rules/KarmaMergeMappings.xml</merge.mappings.rules.karma>
		<merge.mappings.staticdata.karma>file:${merge.templates.location}/staticdata/KarmaMergeMappings.xml</merge.mappings.staticdata.karma>
		<merge.mappings.validation.karma>file:${merge.templates.location}/validation/KarmaMergeMappings.xml</merge.mappings.validation.karma>

		<!-- cartridge output locations -->
		<web.generated.dir>${pom.basedir}/../presentation/${maven.build.generated}/main/java</web.generated.dir>
		<web.manual.dir>${pom.basedir}/../presentation/src/main</web.manual.dir>
		<web.manual.java.dir>${web.manual.dir}/java</web.manual.java.dir>

		<web.manual.xml.dir>${pom.basedir}/../presentation/src/main/xml</web.manual.xml.dir>
		<web.generated.xml.dir>${pom.basedir}/../presentation/${maven.build.generated}/main</web.generated.xml.dir>

		<web.manual.webapp.dir>${pom.basedir}/../presentation/src/webapp</web.manual.webapp.dir>

		<!-- transaction manager configuration -->
		<transaction.manager.name>java:comp/UserTransaction</transaction.manager.name>
		<transaction.manager.class>org.springframework.transaction.jta.JtaTransactionManage</transaction.manager.class>
		<transaction.user.name>null</transaction.user.name>

		<!-- hibernate configuration -->
		<datasource.name>nabla/datasource</datasource.name>
		<datasource>${datasource.name}</datasource>
		<hibernate.db.showSql>true</hibernate.db.showSql>
		<hibernate.db.dialect>${hibernate.dialect}</hibernate.db.dialect>
		<!--
			<sql.mappings>Sybase</sql.mappings>
			<hibernate.dialect>org.hibernate.dialect.SybaseDialect</hibernate.dialect>
		-->
                <!-- hibernate configuration -->
                <!-- default strategy to use when using inhertiance -->
                <!--<hibernate.inheritance.strategy>subclass</hibernate.inheritance.strategy>-->
                <!-- hibernate generator class to use for identifiers -->                
        
        	<hibernate.inheritance.strategy>interface</hibernate.inheritance.strategy>
		<hibernate.generatorClass>assigned</hibernate.generatorClass>
		<!--<hibernate.generatorClass>native</hibernate.generatorClass>-->
		<session.factory>org.springframework.orm.hibernate3.LocalSessionFactoryBean</session.factory>
		<hibernate.enable.cache>false</hibernate.enable.cache>
		<hibernate.query.cache.factory>org.hibernate.cache.StandardQueryCacheFactory</hibernate.query.cache.factory>
		<hibernate.enable.assoc.cache>false</hibernate.enable.assoc.cache>
		<dao.enable.inheritance>true</dao.enable.inheritance>
		<cache.provider>org.hibernate.cache.EhCacheProvider</cache.provider>

		<!-- Remoting configuration : by default, remoting is deactivated. -->
		<remoting.type>none</remoting.type>
		<remoting.port>$V(APPSERVER_PORT)</remoting.port>
		<remoting.server>$V(APP_SERVER)</remoting.server>
		<remoting.context>remote-services</remoting.context>

		<!-- unittest cartridge configuration -->
		<!--
			<unittest.datasource.driver.class.name>com.sybase.jdbc3.jdbc.SybDriver</unittest.datasource.driver.class.name>
		-->
		<unittest.datasource.driver.class.name>${jdbc.driverClassName}</unittest.datasource.driver.class.name>
		<unittest.datasource.class.name>org.springframework.jdbc.datasource.DriverManagerDataSource</unittest.datasource.class.name>
		<unittest.server.test.beanref.factory>file:${mda.sourceDirectory}/common/nabla-daos/unittest/src/test/resources/beanRefFactory.xml</unittest.server.test.beanref.factory>
		<unittest.beanref.factory.reference>file:${mda.sourceDirectory}/configuration/applicationContext/${application.server}/${maven.build.generated}/resources/${application.context.name}</unittest.beanref.factory.reference>
		<unittest.daos.reference>${mda.sourceDirectory}/configuration/applicationContext/${application.server}/${maven.build.generated}/resources/applicationContext-daos.xml</unittest.daos.reference>
		<unittest.local.datasource>file:${pom.basedir}/../unittest/src/test/java/applicationContext-localDataSource.xml</unittest.local.datasource>

		<unittest.datasource.user>${jdbc.nabla.username}</unittest.datasource.user>
		<unittest.datasource.password>${jdbc.nabla.password}</unittest.datasource.password>
		<unittest.datasource.url>${jdbc.url}</unittest.datasource.url>

		<!-- Items related to schema2xmi -->
		<maven.andromda.schema2xmi.user>${jdbc.username}</maven.andromda.schema2xmi.user>
		<maven.andromda.schema2xmi.password>${jdbc.password}</maven.andromda.schema2xmi.password>
		<maven.andromda.schema2xmi.schema>${database.name}</maven.andromda.schema2xmi.schema>

		<maven.andromda.schema2xmi.driverClass>${jdbc.driverClassName}</maven.andromda.schema2xmi.driverClass>
		<!--
			<maven.andromda.schema2xmi.connectionUrl>Data Source=.;Initial
			Catalog=Camgar;User
			ID=sa;Password=p</maven.andromda.schema2xmi.connectionUrl>
		-->
		<maven.andromda.schema2xmi.connectionUrl>${jdbc.url}</maven.andromda.schema2xmi.connectionUrl>
		<maven.andromda.schema2xmi.mappingsUri>file:${mda.sourceDirectory}/configuration/schema2xmi/mappings.xml</maven.andromda.schema2xmi.mappingsUri>
		<maven.andromda.schema2xmi.classStereotype>Entity</maven.andromda.schema2xmi.classStereotype>
		<maven.andromda.schema2xmi.identifierStereotypes>Identifier</maven.andromda.schema2xmi.identifierStereotypes>
		<maven.andromda.schema2xmi.package>com.nabla.andromda</maven.andromda.schema2xmi.package>

	</properties>
	<profiles>
                <profile>
                        <id>eclipse</id>
                        <build>
                            <plugins>
                                <!-- This will overwrite top level .project and .classpath each time.
                                     The maven Eclipse plugin in mda/pom.xml does a better job anyway. See mda/eclipse.bat.-->
                                <plugin>
                                    <groupId>org.andromda.maven.plugins</groupId>
                                    <artifactId>andromdapp-maven-plugin</artifactId>
                                    <executions>
                                        <execution>
                                            <goals>
                                                <goal>eclipse</goal>
                                            </goals>
                                        </execution>
                                    </executions>
                                    <configuration>
                                        <excludes>
                                            <exclude>app/pom.xml</exclude>
                                        </excludes>
                                    </configuration>
                                </plugin>
                            </plugins>
                        </build>
                </profile>		
	</profiles>
</project>
