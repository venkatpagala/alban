<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.andromda.timetracker.ejb3</groupId>
        <artifactId>timetracker-ejb3</artifactId>
        <version>3.4</version>
    </parent>
    <artifactId>database</artifactId>
    <packaging>jar</packaging>
    <name>TimeTracker GUI Database Business Tier</name>
    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>common</artifactId>
            <version>${project.version}</version>
        </dependency>
   
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
            </plugin>
            <!-- not needed because of database cartdrige -->
            <plugin>
                <groupId>org.andromda.maven.plugins</groupId>
                <artifactId>andromdapp-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>schema</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jdbcDriver>${jdbc.driver}</jdbcDriver>
                    <jdbcDriverJar>${jdbc.driver.jar}</jdbcDriverJar>
                    <jdbcConnectionUrl>${jdbc.url}</jdbcConnectionUrl>
                    <jdbcUsername>${jdbc.username}</jdbcUsername>
                    <jdbcPassword>${jdbc.password}</jdbcPassword>
                    <!-- set this to false if you don't want to execute
                         the generated SQL scripts (creates and saves DDL under app/src/main/sql/schema*.sql -->
                    <executeScripts>true</executeScripts>
                    <properties>
                        <property>
                            <name>mappingsLocation</name>
                            <!--<value>${project.basedir}/${maven.build.generated}/main/java</value>-->
                            <value>${project.basedir}/${target.dir}/classes</value>
                        </property>
                        <property>
                            <name>mappingFileExtension</name>
                            <value>hbm.xml</value>
                        </property>
                        <property>
                            <name>createOutputPath</name>
                            <value>${project.basedir}/../app/src/main/sql/schema-create.sql</value>
                        </property>
                        <property>
                            <name>dropOutputPath</name>
                            <value>${project.basedir}/../app/src/main/sql/schema-drop.sql</value>
                        </property>
                    </properties>
                    <!-- You might need to execute additional scripts, just uncomment and add
                         them here:
                    <scripts>
                        <script>${project.basedir}/path/to/scripts/script1.sql</script>
                        <script>${project.basedir}/path/to/scripts/script2.sql</script>
                    </scripts>
                    -->
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.hibernate</groupId>
                        <artifactId>hibernate-entitymanager</artifactId>
                        <version>${hibernate.entitymanager.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>hibernate3-maven-plugin</artifactId>
              <version>${hibernate3.maven.plugin.version}</version>
              <executions>
                <execution>
                  <id>hbm2ddl</id>
                  <phase>process-classes</phase>
                  <goals>
                    <goal>hbm2ddl</goal>
                  </goals>
                </execution>
		<execution>
		  <id>hbm2doc</id>
                  <phase>site</phase>
                  <goals>
                    <goal>hbm2doc</goal>
		    <goal>hbm2cfgxml</goal>
		    <!--<goal>hbm2java</goal>-->
		    <!--<goal>hbm2hbmxml</goal>-->
		    <!--<goal>hbmtemplate</goal>-->
                  </goals>
                </execution>
              </executions>
              <configuration>
                <components>
                  <component>
                    <name>hbm2ddl</name>
                    <implementation>configuration</implementation>
                  </component>
                  <component>
                    <name>hbm2doc</name>
                    <outputDirectory>${target.dir}/site/hibernate3/javadoc</outputDirectory>
                  </component>
                  <component>
                    <name>hbm2cfgxml</name>
                    <outputDirectory>${target.dir}/site/hibernate3/generated-mappings</outputDirectory>
                    <!--<implementation>annotationconfiguration</implementation>-->
                    <implementation>configuration</implementation>
                  </component>
                </components>
                <componentProperties>
                  <!--hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect-->
                  <export>false</export><!-- do not export to the database: tries to use jdbc datasource -->
                  <drop>true</drop>
                  <create>true</create>
                  <format>true</format>
                  <jdk5>true</jdk5>
                  <persistenceunit>${project.parent.artifactId}</persistenceunit>
                  <!--<configurationfile>src/main/resources/hibernate.cfg.xml</configurationfile>-->

                  <outputfilename>../../../../app/src/main/sql/schema-hibernate.sql</outputfilename>
                  <!--
                  <revengfile>${target.dir}/classes/hibernate.reveng.xml</revengfile>
                  <propertyfile>${target.dir}/classes/jdbc.properties</propertyfile>
                  -->
                </componentProperties>
              </configuration>
              <dependencies>
                  <dependency>
                    <groupId>${jdbc.groupId}</groupId>
		    <artifactId>${jdbc.artifactId}</artifactId>
		    <version>${jdbc.version}</version>
                  </dependency>
                  <dependency>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-core</artifactId>
                    <version>${hibernate3.version}</version>
                  </dependency>
                  <dependency>
                    <groupId>org.hibernate</groupId>
                    <artifactId>hibernate-entitymanager</artifactId>
                    <version>${hibernate3.version}</version>
                  </dependency>
                  <dependency>
                      <groupId>org.hibernate</groupId>
                      <artifactId>hibernate-validator</artifactId>
                      <version>${hibernate.validator.version}</version>
                  </dependency>
                </dependencies>
            </plugin>
            <!-- H2 chokes on 'ENGINE=InnoDB' in DDL, remove from generated SQL before running against H2 DB >
            <plugin>
              <artifactId>maven-antrun-plugin</artifactId>
              <executions>
                <execution>
                  <phase>generate-test-sources</phase>
                  <configuration>
                    <target>
                      <replace dir="${basedir}/../app/src/main/sql" value="">
                        <include name="schema.sql"/>
                        <replacetoken> ENGINE=InnoDB</replacetoken>
                      </replace>
                    </target>
                  </configuration>
                  <goals>
                    <goal>run</goal>
                  </goals>
                </execution>
              </executions>
            </plugin-->
            <!-- Run h2 tcp server manually by 'mvn exec:java sql:execute' for local unit testing, this is configuration only, not run during build -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${maven.exec.plugin.version}</version>
                <executions>
                  <execution>
                      <!--phase>test-compile</phase-->
                      <goals>
                          <goal>java</goal>
                      </goals>
                  </execution>
                </executions>
                <configuration>
                    <mainClass>org.andromda.dbtest.H2</mainClass>
                    <classpathScope>test</classpathScope>
                    <workingDirectory>${project.basedir}/${target.dir}</workingDirectory>
                    <arguments>
                    </arguments>
                </configuration>
                <dependencies>
                  <dependency>
                    <groupId>${jdbc.groupId}</groupId>
		    <artifactId>${jdbc.artifactId}</artifactId>
		    <version>${jdbc.version}</version>
                  </dependency>
                </dependencies>
            </plugin>
            <!-- See http://mojo.codehaus.org/sql-maven-plugin/examples/execute.html -->
            <!-- Can't connect to the h2 process outside of the mvn JVM because it locks the DB -->
            <!-- See http://www.h2database.com/html/cheatSheet.html -->
            <!-- Can't use in-memory DB for tomcat/jetty initialization - goes away on exit -->
            <!-- Use for in-memory DB jdbc:h2:timetracker;MODE=MySQL for in-JVM connections only, but it must be started within maven -->
            <!-- Use for server DB jdbc:h2:tcp://localhost/timetracker;MODE=MySQL for external connections, but it must be started outside maven -->
            <!-- default-cli execution id allows us to run the same configuration from the mvn command line -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>${maven.sql.plugin.version}</version>
                <configuration>
                    <driver>${jdbc.driver}</driver>
                    <url>${jdbc.url}</url>
                    <username>${jdbc.username}</username>
                    <password>${jdbc.password}</password>
                    <autocommit>true</autocommit>
                    <skip>${maven.test.skip}</skip>
                </configuration>
                <executions>
                    <execution>
                        <id>default-cli</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <autocommit>true</autocommit>
                            <!-- Ascending alphabetical order, not the order of files in includes -->
                            <!--<orderFile>ascending</orderFile>-->
                            <fileset>
                                <basedir>${basedir}/../app/src/main/sql</basedir>
                                <includes>
                                    <!--<include>schema.sql</include>-->
                                    <!--<include>schema-drop.sql</include>-->
                                    <!--<include>schema-create.sql</include>-->
                                    <include>static-data-insert.sql</include>
                                    <include>test-data-insert.sql</include>
                                </includes>
                            </fileset>
                            <!-- We continue because database can be already created and data already inserted -->
                            <onError>continue</onError>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>${jdbc.groupId}</groupId>
                        <artifactId>${jdbc.artifactId}</artifactId>
                        <version>${jdbc.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-ejb-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                        </manifest>
                    </archive>
                    <generateClient>true</generateClient>
                    <excludes>
                        <exclude>**/*.ref</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
        <!-- comment resources for mvn eclipse:eclipse -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
		<filtering>true</filtering>
		<includes>
			<include>**/*.xml</include>
			<include>**/*.properties</include>
		</includes>
            </resource>
            <resource>
                <directory>${maven.build.generated}/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>${maven.build.generated}/main/java</directory>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
    </build>
</project>
