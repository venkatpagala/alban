// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SessionBeanBase.vsl in andromda-ejb3-cartridge on 04/16/2012 03:32:45.
//
package org.andromda.timetracker.service;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.SessionContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.andromda.timetracker.domain.TimecardDao;
import org.andromda.timetracker.vo.TimecardSearchCriteriaVO;
import org.andromda.timetracker.vo.TimecardSummaryVO;

/**
 * Autogenerated EJB3 session bean base class TimeTrackingServiceBean which contains
 * method level annotations for the session bean.  All method level annotations
 * are inherited by the extending session bean class.
 * 
 */
public abstract class TimeTrackingServiceBase implements TimeTrackingService
{

    // ------ Session Context Injection ------

    @Resource
    protected SessionContext context;

    // ------ Persistence Context Definitions --------
    /**
     * Inject persistence context timetracker-ejb3
     */
    @PersistenceContext(unitName = "timetracker-ejb3")
    protected EntityManager emanager;


    // ------ DAO Injection Definitions --------

    /**
     * Inject DAO TimecardDao
     */
    @EJB    
    private TimecardDao timecardDao;

    // --------------- Constructors ---------------

    public TimeTrackingServiceBase()
    {
        super();
    }

    // ------ DAO Getters --------

    /**
     * Get the injected DAO TimecardDao
     */
    protected TimecardDao getTimecardDao()
    {
        return this.timecardDao;
    }

    // -------- Business Methods  --------------

    /**
     * 
     */
    public TimecardSummaryVO[] findTimecards(TimecardSearchCriteriaVO criteria)    {
        if (criteria == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.TimeTrackingServiceBean.findTimecards(TimecardSearchCriteriaVO criteria) - 'criteria' can not be null");
        }
        try
        {
            return this.handleFindTimecards(criteria);
        }
        catch (Throwable th)
        {
            throw new TimeTrackingServiceException("Error performing 'TimeTrackingService.findTimecards(TimecardSearchCriteriaVO criteria)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #findTimecards(TimecardSearchCriteriaVO)}
     */
    protected abstract TimecardSummaryVO[] handleFindTimecards(TimecardSearchCriteriaVO criteria) throws Exception;


    // -------- Lifecycle Callbacks --------------

}