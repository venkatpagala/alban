// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SessionBeanBase.vsl in andromda-ejb3-cartridge on 04/03/2012 12:18:27.
//
package org.andromda.timetracker.service;

import java.util.List;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.Remove;
import javax.ejb.SessionContext;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.andromda.timetracker.domain.User;
import org.andromda.timetracker.domain.UserDao;
import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserVO;
import org.jboss.seam.annotations.Destroy;
import org.jboss.seam.annotations.Factory;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Out;
import org.jboss.seam.annotations.datamodel.DataModel;
import org.jboss.seam.annotations.datamodel.DataModelSelection;
import org.jboss.seam.log.Log;

/**
 * Autogenerated EJB3 session bean base class UserServiceBean which contains
 * method level annotations for the session bean.  All method level annotations
 * are inherited by the extending session bean class.
 *
 */
public abstract class UserServiceBase implements UserService
{

    @Logger
    private Log              logger;

    /** the client list. */
    @DataModel
    private List<User>       personList;

    /** the selected value. */
    @DataModelSelection
    @Out(required = false)
    private User             person;

    // ------ Session Context Injection ------

    @Resource
    protected SessionContext context;

    // ------ Persistence Context Definitions --------

    /**
     * Inject persistence context timetracker-ejb3
     */
    @In(required = true)
    @PersistenceContext(unitName = "timetracker-ejb3")
    protected EntityManager  emanager;

    // ------ DAO Injection Definitions --------

    /**
     * Inject DAO UserDao
     */
    @EJB
    private UserDao          userDao;

    // --------------- Constructors ---------------

    public UserServiceBase()
    {
        super();
    }

    // ------ DAO Getters --------

    /**
     * Get the injected DAO UserDao
     */
    protected UserDao getUserDao()
    {
        return this.userDao;
    }

    // -------- Business Methods --------------

    /**
     *  factory for the personList.
     */
    @SuppressWarnings("unchecked")
    @Factory("personList")
    public void findUsers()
    {
        try
        {
            Query query = null;
            query = this.emanager.createNamedQuery("User.findAll");
            this.personList = query.getResultList();
        }
        catch (final NoResultException ex)
        {
            // FacesMessages.instance().addToControl("person", "Aucune personne trouvee en base.");
            this.logger.debug("Empty person list");
        }
    }

    /**
     *  select the value.
     * */
    public void select()
    {
        // person.setToDelete(true);
    }

    /**
     * delete a client.
     */
    public void delete()
    {
        this.personList.remove(this.person);
        this.emanager.remove(this.person);
        this.person = null;
    }

    /**
     * remove method.
     */
    @Destroy
    @Remove
    public void destroy()
    {
        // nothing necessary here
    }

    /**
     *
     */
    public UserVO[] getAllUsers() throws UserDoesNotExistException
    {
        try
        {
            return this.handleGetAllUsers();
        }
        catch (final UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getAllUsers()' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getAllUsers()}
     */
    protected abstract UserVO[] handleGetAllUsers() throws Exception;

    /**
     *
     */
    public UserVO getUser(final String username) throws UserDoesNotExistException
    {
        if (username == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.getUser(String username) - 'username' can not be null");
        }
        try
        {
            return this.handleGetUser(username);
        }
        catch (final UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.getUser(String username)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #getUser(String)}
     */
    protected abstract UserVO handleGetUser(String username) throws Exception;

    /**
     *
     */
    public UserDetailsVO registerUser(final UserDetailsVO userDetailVO) throws UserDoesNotExistException
    {
        if (userDetailVO == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.registerUser(UserDetailsVO userDetailVO) - 'userDetailVO' can not be null");
        }
        try
        {
            return this.handleRegisterUser(userDetailVO);
        }
        catch (final UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.registerUser(UserDetailsVO userDetailVO)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #registerUser(UserDetailsVO)}
     */
    protected abstract UserDetailsVO handleRegisterUser(UserDetailsVO userDetailVO) throws Exception;

    /**
     *
     */
    public void removeUser(final UserVO userVO) throws UserDoesNotExistException
    {
        if (userVO == null)
        {
            throw new IllegalArgumentException("org.andromda.timetracker.service.UserServiceBean.removeUser(UserVO userVO) - 'userVO' can not be null");
        }
        try
        {
            this.handleRemoveUser(userVO);
        }
        catch (final UserDoesNotExistException ex)
        {
            throw ex;
        }
        catch (final Throwable th)
        {
            throw new UserServiceException("Error performing 'UserService.removeUser(UserVO userVO)' --> " + th, th);
        }
    }

    /**
     * Performs the core logic for {@link #removeUser(UserVO)}
     */
    protected abstract void handleRemoveUser(UserVO userVO) throws Exception;

    // -------- Lifecycle Callbacks --------------

}
