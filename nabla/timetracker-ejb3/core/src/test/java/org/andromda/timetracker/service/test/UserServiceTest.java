// license-header java merge-point
//
// Generated by: SessionTest.vsl in andromda-ejb3-cartridge.
//
package org.andromda.timetracker.service.test;

import java.util.Date;

import org.andromda.timetracker.domain.Role;
import org.andromda.timetracker.security.PasswordEncoder;
import org.andromda.timetracker.service.UserDoesNotExistException;
import org.andromda.timetracker.service.UserServiceRemote;
import org.andromda.timetracker.test.EJB3Container;
import org.andromda.timetracker.vo.UserDetailsVO;
import org.andromda.timetracker.vo.UserRoleVO;
import org.andromda.timetracker.vo.UserVO;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Service test class UserServiceTest for testing with TestNG
 * Check the testng.xml for initialization of the EJB3Container before running any tests.
 */
public class UserServiceTest
{
    private static final Log logger = LogFactory.getLog(UserServiceTest.class);

    /**
     *
     */
    @org.testng.annotations.Test
    public void testRegisterUser()
    {
        try
        {
            final UserServiceRemote userService = (UserServiceRemote) EJB3Container.getInitialContext("user", "password").lookup("UserServiceBean/remote");

            // Remote testuser if it already exists
            UserVO userVO = null;
            try
            {
                userVO = userService.getUser("testuser");
                if ((userVO != null) && (userVO.getId().longValue() > 0))
                {
                    userService.removeUser(userVO);
                }
            }
            catch (final UserDoesNotExistException e)
            {
                // OK to avoid
            }

            // Add testuser
            UserDetailsVO udVO = new UserDetailsVO();
            udVO.setFirstName("testuser");
            udVO.setLastName("testuser");
            udVO.setEmail("test@test.com");
            udVO.setIsActive(false);
            udVO.setUsername("testuser");
            udVO.setPassword(PasswordEncoder.getMD5Base64EncodedPassword("testuser"));
            udVO.setCreationDate(new Date());

            final UserRoleVO urVO = new UserRoleVO();
            urVO.setRole(Role.STANDARD_USER);

            udVO.setRoles(new UserRoleVO[] { urVO });

            udVO = userService.registerUser(udVO);

            assert udVO != null;
            assert udVO.getId().longValue() > 0;

            UserServiceTest.logger.info("Registered new user: " + udVO.getFirstName() + ", " + udVO.getId());

            // Remote testuser if it already exists
            try
            {
                userVO = userService.getUser("testuser");
                if ((userVO != null) && (userVO.getId().longValue() > 0))
                {
                    userService.removeUser(userVO);
                }
            }
            catch (final UserDoesNotExistException e)
            {
                // OK to avoid
            }

        }
        catch (final Exception ex)
        {
            UserServiceTest.logger.warn("Failed test testRegisterUser()", ex);
        }
    }

    /**
     *
     */
    @org.testng.annotations.Test
    public void testGetAllUsers()
    {
        try
        {
            final UserServiceRemote userService = (UserServiceRemote) EJB3Container.getInitialContext("user", "password").lookup("UserServiceBean/remote");
            final UserVO[] users = userService.getAllUsers();
            assert users.length > 0;

            for (final UserVO userVO : users)
            {
                UserServiceTest.logger.info("user : " + userVO.getFirstName());
            }
        }
        catch (final Exception ex)
        {
            UserServiceTest.logger.warn("Failed test testGetAllUsers()", ex);
        }
    }
}
