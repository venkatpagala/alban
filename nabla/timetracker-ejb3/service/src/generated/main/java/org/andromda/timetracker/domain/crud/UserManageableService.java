// license-header java merge-point
// Generated by: crud/SpringCrudService.vsl in andromda-spring-cartridge.
package org.andromda.timetracker.domain.crud;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 
 */
public interface UserManageableService
{
    /**
     * @param username 
     * @param password 
     * @param firstName 
     * @param lastName 
     * @param email 
     * @param isActive 
     * @param creationDate 
     * @param comment 
     * @param id 
     * @param roles 
     * @return create
     * @throws Exception
     */
    public UserValueObject create(String username, String password, String firstName, String lastName, String email, boolean isActive, Date creationDate, String comment, Long id, Long[] roles)
        throws Exception;

    /**
     * @param id The manageable identifier name
     * @return manageable
     * @throws Exception
     */
    public UserValueObject readById(Long id)
        throws Exception;

    /**
     * @param username 
     * @param password 
     * @param firstName 
     * @param lastName 
     * @param email 
     * @param isActive 
     * @param creationDate 
     * @param comment 
     * @param id 
     * @param roles 
     * @return manageable
     * @throws Exception
     */
    public List<UserValueObject> read(String username, String password, String firstName, String lastName, String email, Boolean isActive, Date creationDate, String comment, Long id, Long[] roles)
        throws Exception;

    /**
     * @return all manageable
     * @throws Exception
     */
    public List<UserValueObject> readAll()
        throws Exception;

    /**
     * @return manageable backing lists
     * @throws Exception
     */
    public Map<String,?> readBackingLists()
        throws Exception;

    /**
     * @param username 
     * @param password 
     * @param firstName 
     * @param lastName 
     * @param email 
     * @param isActive 
     * @param creationDate 
     * @param comment 
     * @param id 
     * @param roles 
     * @return update
     * @throws Exception
     */
    public UserValueObject update(String username, String password, String firstName, String lastName, String email, boolean isActive, Date creationDate, String comment, Long id, Long[] roles)
        throws Exception;

    /**
     * @param ids The array of IDs to be deleted
     * @throws Exception
     */
    public void delete(Long[] ids)
        throws Exception;

}