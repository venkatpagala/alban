// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: hibernate/HibernateEntity.vsl overrided in andromda-hibernate-cartridge.
//
package org.andromda.timetracker.domain;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 
 */
@XmlType(propOrder = {"role"})
@XmlAccessorType(XmlAccessType.FIELD)
public abstract class UserRole implements Serializable, Comparable<UserRole>
 {
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 7844086459073233566L;

    // Generate 2 attributes
    @XmlElement(name = "role")
    private Role role;

    /**
     * 
     * @return this.role Role
     */
    public Role getRole()
    {
        return this.role;
    }

    /**
     * 
     * @param roleIn Role
     */
    public void setRole(Role roleIn)
    {
        this.role = roleIn;
    }

    @XmlElement(name = "id")
    private Long id;

    /**
     * 
     * @return this.id Long
     */
    public Long getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn Long
     */
    public void setId(Long idIn)
    {
        this.id = idIn;
    }

    // Generate 1 associations
    /**
     * Returns <code>true</code> if the argument is an UserRole instance and all identifiers for this entity
     * equal the identifiers of the argument entity. Returns <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object object)
    {
        if (this == object)
        {
            return true;
        }
        if (!(object instanceof UserRole))
        {
            return false;
        }
        final UserRole that = (UserRole)object;
        if (this.id == null || that.getId() == null || !this.id.equals(that.getId()))
        {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code based on this entity's identifiers.
     */
    @Override
    public int hashCode()
    {
        int hashCode = 0;
        hashCode = 29 * hashCode + (this.id == null ? 0 : this.id.hashCode());

        return hashCode;
    }

    /**
     * Constructs new instances of {@link UserRole}.
     */
    public static final class Factory
    {
        /**
         * Constructs a new instance of {@link UserRole}.
         * @return new UserRoleImpl()
         */
        public static UserRole newInstance()
        {
            return new UserRoleImpl();
        }


        /**
         * Constructs a new instance of {@link UserRole}, taking all possible properties
         * (except the identifier(s))as arguments.
         * @param role Role
         * @return newInstance UserRole
         */
        public static UserRole newInstance(Role role)
        {
            final UserRole entityInstance = new UserRoleImpl();
            entityInstance.setRole(role);
            return entityInstance;
        }
    }

    /**
     * @see Comparable#compareTo
     */
    public int compareTo(UserRole o)
    {
        int cmp = 0;
        if (this.getId() != null)
        {
            cmp = this.getId().compareTo(o.getId());
        }
        else
        {
            if (this.getRole() != null)
            {
                cmp = (cmp != 0 ? cmp : this.getRole().compareTo(o.getRole()));
            }
        }
        return cmp;
    }
// HibernateEntity.vsl merge-point
}