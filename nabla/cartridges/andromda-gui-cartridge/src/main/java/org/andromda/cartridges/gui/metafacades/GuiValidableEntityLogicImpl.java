// license-header java merge-point
//
// Generated by: MetafacadeLogicImpl.vsl in andromda-meta-cartridge.
package org.andromda.cartridges.gui.metafacades;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.andromda.cartridges.gui.GuiProfile;
import org.andromda.metafacades.uml.AttributeFacade;
import org.andromda.metafacades.uml.DependencyFacade;
import org.andromda.metafacades.uml.Entity;
import org.andromda.metafacades.uml.ManageableEntityAssociationEnd;
import org.andromda.metafacades.uml.ManageableEntityAttribute;
import org.andromda.metafacades.uml.ModelElementFacade;
import org.andromda.metafacades.uml.UMLProfile;
import org.apache.log4j.Logger;

/**
 * A Validable entity handles Validable stereotype. Its a particular Manageable entity in the way it
 * carries some of the Manageable use cases, overrides some others, and defines specific ones.
 * MetafacadeLogic implementation for org.andromda.cartridges.gui.metafacades.GuiValidableEntity.
 *
 * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity
 */
public class GuiValidableEntityLogicImpl extends GuiValidableEntityLogic {
    private static final long serialVersionUID = 34L;

    private final Logger      logger_          = Logger.getLogger(GuiValidableEntityLogicImpl.class);

    /**
     * Public constructor for GuiValidableEntityLogicImpl
     * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity
     */
    public GuiValidableEntityLogicImpl(final Object metaObject, final String context) {
        super(metaObject, context);
    }

    @Override
    public String getName() {

        return super.getName() + this.getValidationNameSuffix();

    }

    /**
     *
     * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity#getValidationNameSuffix()
     */
    @Override
    public String handleGetValidationNameSuffix() {

        return "Validation";

    }

    /**
     *
     * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity#getValidableObjectReferences()
     */
    @Override
    protected List<ModelElementFacade> handleGetValidableObjectReferences() {

        final Collection<DependencyFacade> sourceDeps = this.getSourceDependencies();
        final List<ModelElementFacade> boRef = new ArrayList<ModelElementFacade>();

        for (final DependencyFacade dep : sourceDeps) {

            if (dep.hasStereotype(GuiProfile.STEREOTYPE_VO_REF)) {

                boRef.add(dep.getTargetElement());

            }

        }

        return boRef;

    }

    /**
     *
     * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity#eachValidableObjectReferenceIsValid()
     */
    @Override
    protected boolean handleEachValidableObjectReferenceIsValid() {

        final List<Entity> boRefs = this.getValidableObjectReferences();

        for (final Entity classifier : boRefs) {

            if (this.getIdentifierForValidableObjectReference(classifier.getName()) == null) {

                return false;

            }

            if (classifier.hasStereotype(UMLProfile.STEREOTYPE_ENTITY) && !this.hasValueObject(classifier)) {

                return false;

            }

        }

        return true;

    }

    /**
     *
     * @see org.andromda.cartridges.gui.metafacades.GuiValidableEntity#getIdentifierForValidableObjectReference(String)
     */
    @Override
    protected String handleGetIdentifierForValidableObjectReference(final String validableObjectName) {

        final Collection<DependencyFacade> sourceDeps = this.getSourceDependencies();
        String attributeName = this.getManageableIdentifier().getName();

        // Retrieve referenced Business Object, and the discrimator attribute name
        for (final DependencyFacade dep : sourceDeps) {

            if (dep.hasStereotype(GuiProfile.STEREOTYPE_VO_REF) && dep.getTargetElement().getName().equals(validableObjectName)) {

                final Object filterTag = dep.findTaggedValue(GuiProfile.TAGGEDVALUE_MANAGEABLE_VOREF_DISCRIMINATOR);

                this.logger_.info("GetIdentifierForValidableObjectReference : The tag value is : " + filterTag + " for tag : " + GuiProfile.TAGGEDVALUE_MANAGEABLE_VOREF_DISCRIMINATOR + " - "
                        + this.getFullyQualifiedName());

                if (filterTag != null) {

                    if (!"".equals(String.valueOf(filterTag))) {

                        attributeName = String.valueOf(filterTag);

                    }

                }

            }

        }

        this.logger_.info("GetIdentifierForValidableObjectReference : The tag value is : " + attributeName + " for tag : " + GuiProfile.TAGGEDVALUE_MANAGEABLE_VOREF_DISCRIMINATOR + " - " + this.getFullyQualifiedName());

        // Find the corresponding attribute or association
        for (final Iterator<ManageableEntityAttribute> it = this.getManageableAttributes().iterator(); it.hasNext();) {

            final AttributeFacade attribute = it.next();

            if (attribute.getName().equals(attributeName)) {

                return attribute.getName();

            }

        }

        for (final ManageableEntityAssociationEnd assoc : this.getManageableAssociationEnds()) {

            if (assoc.getName().equals(attributeName)) {

                return assoc.getName();

            }

        }

        return null;

    }
}
