#if ($umlUtils.shouldOutput($entity) && !$entity.abstract)
#parse("templates/ejb3/Globals.vm")
#set ($generatedFile = "${stringUtils.replace($entity.fullyQualifiedEntityName,'.','/')}Create.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by test/EntityCreate.vsl in andromda-ejb3-cartridge.
//
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;

#end
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
##
## If the entity is in the middle of an inheritance hierarchy
## it cannot be:
##
## 1. an embeddable superclass
## 2. an abstract class
##
##
## If the entity is explicitly defined as a mapped superclass then use the standard entity name
## If explicit business operations are modelled on the entity, then the entity naming convention differs
## All other entities have the standard entity name
##

/**
 * Autogenerated Entity constructor class for ${entity.entityName} which creates
 * an Entity instance using dummy/default values for all properties, with a method for
 * minimal properties (only required), all properties, and an update from minimal to update the rest of the properties.
 * It assumes that Entities only have relations to other entities, so those constructors can be used.
 *
 * Autogenerated by AndroMDA ejb3\test\EntityConstructor.vsl on $umlUtils.date
 *
$entity.getDocumentation(" * ")
 */
public class ${entity.entityName}Create
#if($entity.requiresGeneralizationMapping && !$entity.generalization.interface && !$entity.generalization.abstract)
#if($entity.embeddableSuperclassGeneralizationExists && $entity.generalization.entityImplementationRequired)
    extends ${entity.generalization.fullyQualifiedEntityEmbeddableName}Create
#else
    extends ${entity.generalization.fullyQualifiedName}Create
#end
#end
{
    private static Logger LOGGER = LogManager.getLogger(${entity.entityName}Create.class);

    /**
     * Create an Entity $entity.name with all attributes and associations set
     * @return $entity.fullyQualifiedName
     */
    public static ${entity.fullyQualifiedName} createEntity()
    {
        $entity.fullyQualifiedName entity = new ${entity.fullyQualifiedName}();
#if ($entity.compositePrimaryKeyPresent)
        ${entity.entityName}PK pk = ${entity.entityName}Create.createEntityPK(true);
#end
#set ($properties = $entity.getAttributes(true))
#set ($associations = $entity.entityRelations)
## Set the value for all properties including ancestor properties
        // Identifier attributes
#foreach ($property in $properties)
##        // $property.type.fullyQualifiedName $property.name identifier=$property.identifier usingAssignedIdentifier=$entity.usingAssignedIdentifier transient=$property.transient many=$property.many property=$property type=$property.type
#if (!$property.transient && $property.identifier && $entity.usingAssignedIdentifier && !$entity.compositePrimaryKeyPresent)
       #if ($property.type.abstract) //#end entity.${property.setterName}($umlUtils.createConstructor($property, $property.many, $entity));
#end
#end

#if (!$associations.empty)
        // Entity Associations
        javax.persistence.EntityManager em = javax.persistence.Persistence.createEntityManagerFactory(com.wdpr.dbtest.JPAJUnitAncestor.PERSISTENCE_UNIT).createEntityManager();
#end
#foreach ($end in $associations)
#set ($thisEnd = $end.otherEnd)
#if (!$thisEnd.transient && !$thisEnd.readOnly && !$thisEnd.identifier)
#set ($daoVar = $stringUtils.uncapitalize(${thisEnd.type.daoName}))
        try
        {
            ${thisEnd.type.daoName}Impl $daoVar = new ${thisEnd.type.daoName}Impl();
            // Not injected for unit test, set manually to test persistence context
            if (${daoVar}.getEmanager()==null)
            {
                ${daoVar}.setEmanager(em);
            }
#set ($entityVar = $stringUtils.uncapitalize($thisEnd.type.name))
#set ($entityPK = "")
            // composite=$thisEnd.type.compositePrimaryKeyPresent size=$thisEnd.type.identifiers.size() end=$end.name thisEnd=$thisEnd.name end.type=$end.type thisEnd.type=$thisEnd.type end=$end thisEnd=$thisEnd
#foreach ($identifier in $thisEnd.type.identifiers)
            // identifier=$identifier.fullyQualifiedName
##if (!$thisEnd.type.compositePrimaryKeyPresent)
##set ($identifier = $thisEnd.type.identifiers.iterator().next())
#set ($entityPK = "$entityPK $umlUtils.createConstructor($identifier, false, $entity)#if ($velocityCount != $thisEnd.type.identifiers.size()), #end")
##end
#end
            $thisEnd.type.fullyQualifiedName $entityVar = ${daoVar}.load($entityPK);
            if ($entityVar == null)
            {
                LOGGER.error("Error retrieving ${thisEnd.type.name} by identifier for $entity.Name: "#if($thisEnd.type.identifiers.size()==1) + $entityPK#end);
            }
            else
            {
#if ($thisEnd.many)
                $thisEnd.getterSetterTypeName $thisEnd.name = new ${umlUtils.getImplCollection($thisEnd.getterSetterTypeName)}();
                ${thisEnd.name}.add($entityVar);
                entity.${thisEnd.setterName}($thisEnd.name);
#else
                entity.${thisEnd.setterName}($entityVar);
#end
            }
##       #if ($thisEnd.type.abstract) //#end entity.${thisEnd.setterName}($umlUtils.createConstructor($thisEnd, $thisEnd.many, $entity));
        }
        catch (${thisEnd.type.daoName}Exception ex)
        {
            LOGGER.error("Error retrieving ${thisEnd.type.name} by identifier", ex);
        }
#end
#end

        // Updatable properties
#foreach ($property in $properties)
        // $property.type.fullyQualifiedName $property.fullyQualifiedName transient=$property.transient identifier=$property.identifier usingAssignedIdentifier=$entity.usingAssignedIdentifier many=$property.many property=$property type=$property.type
##        // Transient=$property.hasStereotype("Transient") stereotypes=$property.stereotypeNames.size() #foreach($name in $property.stereotypeNames)$name #end
#if (!$property.transient && !$property.readOnly && !$property.identifier)
       #if ($property.type.abstract) //#end entity.${property.setterName}($umlUtils.createConstructor($property, $property.many, $entity));
#end
#end

        // Transient properties
#foreach ($property in $properties)
##        // $property.type.fullyQualifiedName $property.fullyQualifiedName transient=$property.transient identifier=$property.identifier usingAssignedIdentifier=$entity.usingAssignedIdentifier many=$property.many property=$property type=$property.type
##        // Transient=$property.hasStereotype("Transient") stereotypes=$property.stereotypeNames.size() #foreach($name in $property.stereotypeNames)$name #end
#if ($property.transient)
       #if ($property.type.abstract)//#end entity.${property.setterName}($umlUtils.createConstructor($property, $property.many, $entity));
#end
#end
#if ($entity.compositePrimaryKeyPresent)
        entity.setPk(pk);
#end
        return entity;
    }
#if ($entity.compositePrimaryKeyPresent)

    /**
     * Create an Entity $entity.name Primary Key class with all attributes and associations set
     * @param assignIdentifiers
     * @return $entity.fullyQualifiedName
     */
    public static $entity.fullyQualifiedEntityCompositePrimaryKeyName createEntityPK(boolean assignIdentifiers)
    {
        $entity.fullyQualifiedEntityCompositePrimaryKeyName pk = new ${entity.fullyQualifiedEntityCompositePrimaryKeyName}();
#set ($identifiers = $entity.getIdentifiers())
#foreach ($attribute in $identifiers)
#set ($constructor=$umlUtils.createConstructor($attribute, $attribute.many, $entity))
        pk.${attribute.setterName}($constructor);
#end
        return pk;
    }
#end
}
#end