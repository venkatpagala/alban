<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>com.nabla.project</groupId>
		<artifactId>installer</artifactId>
		<version>1.0.1-SNAPSHOT</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<artifactId>etl-deploy</artifactId>
	<name>Nabla ETL Deploy</name>
	<packaging>izpack-jar</packaging>
	<description>Nabla ETL Deploy</description>

<!-- TODO http://svn.codehaus.org/izpack-svn/izpack-maven/trunk/izpack-maven-plugin/src/it/izpack-tomcat/ 
http://svn.codehaus.org/izpack-svn/izpack-maven/trunk/izpack-maven-plugin/src/it/sample/pom.xml
-->

  <properties>
    <app.group>${project.groupId}</app.group>
    <app.title>${project.name}</app.title>
    <app.subpath>${project.artifactId}-${project.version}</app.subpath>
    <app.version>${project.version}</app.version>
      
    <download.dir>${project.build.directory}/downloads</download.dir>

    <groovy.version>1.5.6</groovy.version>
    <gant.version>1.3.0</gant.version>
    <scriptom.version>1.5.4</scriptom.version>
    <graphicsbuilder.version>0.5.1</graphicsbuilder.version>
    <jidebuilder.version>1.0</jidebuilder.version>
    <svg-salamander.version>1.0</svg-salamander.version>
    
    <message.archive>jidebuilder-${project.version}.jar</message.archive>

    <groovy.bin.archive>groovy-binary-${groovy.version}.zip</groovy.bin.archive>
    <groovy.bin.url>http://dist.codehaus.org/groovy/distributions/${groovy.bin.archive}</groovy.bin.url>

    <groovy.docs.archive>groovy-docs-${groovy.version}.zip</groovy.docs.archive>
    <groovy.docs.url>http://dist.codehaus.org/groovy/distributions/${groovy.docs.archive}</groovy.docs.url>

    <gant.archive>gant-${gant.version}_groovy-${groovy.version}.zip</gant.archive>
    <gant.url>http://dist.codehaus.org/gant/distributions/${gant.archive}</gant.url>

    <scriptom.archive>scriptom-${scriptom.version}.zip</scriptom.archive>
    <scriptom.url>http://docs.codehaus.org/download/attachments/24576222/${scriptom.archive}?version=1</scriptom.url>

    <graphicsbuilder.archive>graphicsbuilder-${graphicsbuilder.version}.zip</graphicsbuilder.archive>
    <graphicsbuilder.url>http://docs.codehaus.org/download/attachments/12190076/${graphicsbuilder.archive}</graphicsbuilder.url>

    <jidebuilder.archive>jidebuilder-${jidebuilder.version}.jar</jidebuilder.archive>
    <jidebuilder.url>http://svn.codehaus.org/groovy-contrib/jidebuilder/trunk/dist/jidebuilder-${jidebuilder.version}.jar</jidebuilder.url>

    <svg-salamander.archive>svg-salamander-${svg-salamander.version}.jar</svg-salamander.archive>
    <svg-salamander.url>http://docs.codehaus.org/download/attachments/34701376/svg-salamander-${svg-salamander.version}.jar</svg-salamander.url>

    <groovy.binary.zip>${download.dir}/${groovy.bin.archive}</groovy.binary.zip>
    <groovy.docs.zip>${download.dir}/${groovy.docs.archive}</groovy.docs.zip>
    <gant.zip>${download.dir}/${gant.archive}</gant.zip>
    <scriptom.zip>${download.dir}/${scriptom.archive}</scriptom.zip>
    <graphicsbuilder.zip>${download.dir}/${graphicsbuilder.archive}</graphicsbuilder.zip>
    <svg-salamander.jar>${download.dir}/svg-salamander-${svg-salamander.version}.jar</svg-salamander.jar>
    <jidebuilder.jar>${download.dir}/jidebuilder-${jidebuilder.version}.jar</jidebuilder.jar>

  </properties>
  
  <dependencies>

    <!-- this will override the one in the plugin -->
    <dependency>
      <groupId>org.codehaus.izpack</groupId>
      <artifactId>izpack-standalone-compiler</artifactId>
      <!-- dont want to download this artifact when retrieve the installer as transitive dependency -->
      <optional>true</optional>
    </dependency>
    
		<dependency>
			<groupId>org.jboss.tools.gwt.kitchensink</groupId>
			<artifactId>gwt-kitchensink</artifactId>
			<version>${project.version}</version>
			<type>war</type>
		</dependency>    
  </dependencies>

  <build>

    <defaultGoal>package</defaultGoal>

    <plugins>      
      
      <!--  fetch resource files from the orignal Ant build project -->
      <!--
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-scm-plugin</artifactId>
        <version>${maven.scm.plugin.version}</version>
        <executions>
          <execution>
            <id>svn-co-resource-to-staging</id>
            <phase>process-resources</phase>
            <goals>
              <goal>checkout</goal>
            </goals>
            <configuration>
              <skipCheckoutIfExists>true</skipCheckoutIfExists>
              <connectionUrl>
                scm:svn:http://svn.codehaus.org/izpack-svn/izpack-showcases/groovy/trunk/resource/
              </connectionUrl>
              <checkoutDirectory>${staging.dir}/resource</checkoutDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      -->

      <!-- fetch and unpack all dependent bundles into staging area -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven.dependency.plugin.version}</version>
        <executions>
            <!--
          <execution>
            <id>unpack-bundle-dependencies</id>
            <phase>process-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>groovy</artifactId>
                  <version>${groovy.version}</version>
                  <classifier>binary</classifier>
                  <type>zip</type>
                  <outputDirectory>${staging.dir}/binary</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>groovy</artifactId>
                  <version>${groovy.version}</version>
                  <classifier>docs</classifier>
                  <type>zip</type>
                  <outputDirectory>${staging.dir}/docs</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>gant</artifactId>
                  <version>${gant.version}</version>
                  <classifier>binary</classifier>
                  <type>zip</type>
                  <outputDirectory>${staging.dir}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>graphicsbuilder</artifactId>
                  <version>${graphicsbuilder.version}</version>
                  <classifier>binary</classifier>
                  <type>zip</type>
                  <outputDirectory>${staging.dir}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
                -->
          <!-- izpack can't match include="scriptcom*.jar"
            so, split into separate bin and lib directories -->

	  <!--
          <execution>
            <id>unpack-scriptom-dlls</id>
            <phase>process-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>scriptom</artifactId>
                  <version>${scriptom.version}</version>
                  <classifier>binary</classifier>
                  <type>zip</type>
                  <includes>scriptom*.dll</includes>
                  <outputDirectory>${staging.dir}/scriptom/bin</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>unpack-scriptom-jars</id>
            <phase>process-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>scriptom</artifactId>
                  <version>${scriptom.version}</version>
                  <classifier>binary</classifier>
                  <type>zip</type>
                  <includes>scriptom*.jar</includes>
                  <outputDirectory>${staging.dir}/scriptom/lib</outputDirectory>
                </artifactItem>
              </artifactItems>
              <markersDirectory>${project.build.directory}/scriptomJarsMarker</markersDirectory>
            </configuration>
          </execution>
	  -->

          <execution>
            <id>copy-jars-dependencies</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.nabla.project.core.etl.model.message</groupId>
                  <artifactId>message</artifactId>
                  <version>${project.version}</version>
                  <type>jar</type>
                  <outputDirectory>${staging.dir}/jars</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>log4j</groupId>
                  <artifactId>log4j</artifactId>
                  <version>${log4j.version}</version>
                  <type>jar</type>
                  <outputDirectory>${staging.dir}/lib</outputDirectory>
                </artifactItem>                
                <!--
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>svg-salamander</artifactId>
                  <version>${svg-salamander.version}</version>
                  <type>jar</type>
                  <outputDirectory>${staging.dir}/jars</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>izpack.demo</groupId>
                  <artifactId>jidebuilder</artifactId>
                  <version>${jidebuilder.version}</version>
                  <type>jar</type>
                  <outputDirectory>${staging.dir}/jars</outputDirectory>
                </artifactItem>
                -->
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>UTF-8</encoding>
              <outputDirectory>${staging.dir}/resources</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- http://docs.codehaus.org/display/IZPACK/IzPack+Maven+Plugin+Reference -->
      <plugin>
        <groupId>org.codehaus.izpack</groupId>
        <artifactId>izpack-maven-plugin</artifactId>
        <version>${maven.izpack.plugin.version}</version>
        <extensions>true</extensions>
        <!-- common configuration by all executions -->
        <configuration>
          <!--<descriptor>${basedir}/src/main/izpack/install.xml</descriptor>-->
          <izpackBasedir>${staging.dir}</izpackBasedir>
          <finalName>NABLAInstaller</finalName>
          <enableOverrideArtifact>true</enableOverrideArtifact>
          <mkdirs>true</mkdirs>
        </configuration>

        <executions>
          <execution>
            <id>standard-installer</id>
            <phase>package</phase>
            <goals>
              <goal>izpack</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
