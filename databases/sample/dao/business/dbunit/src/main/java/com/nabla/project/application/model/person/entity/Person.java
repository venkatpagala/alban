package com.nabla.project.application.model.person.entity;


// Generated by MyEclipse Persistence Tools
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Person generated by MyEclipse Persistence Tools
 */
@SuppressWarnings( "serial" )
@Entity
@Table( 
        name = "PERSON", schema = "" /*, uniqueConstraints =
{
@UniqueConstraint( columnNames =
{
"LASTNAME"}
)
, @UniqueConstraint( columnNames =
{
"ADDRESS_ID"}
)
}*/
     )
public class Person
    extends AbstractPerson
    implements java.io.Serializable
{
    // Constructors

    /** default constructor */
    public Person(  )
    {
    }

    /** minimal constructor */
    public Person( Long id, Address address, Date birthdate, String firstname, String lastname, Boolean married,
                   Integer nbchildren )
    {
        super( id, address, birthdate, firstname, lastname, married, nbchildren );
    }

    /** full constructor */
    public Person( Long id, Address address, Date birthdate, String firstname, String lastname, Boolean married,
                   Integer nbchildren, Set<Activity> activities )
    {
        super( id, address, birthdate, firstname, lastname, married, nbchildren, activities );
    }

    public Person( String lastname, String firstname, Date birtdate, boolean married, int nbchildren )
    {
        super(  );
        setLastname( lastname );
        setFirstname( firstname );
        setBirthdate( birtdate );
        setMarried( married );
        setNbchildren( nbchildren );
    }

    public boolean equals( Object o )
    {
        if ( this == o )
        {
            return true;
        }

        if ( ( o == null ) || ( getClass(  ) != o.getClass(  ) ) )
        {
            return false;
        }

        Person person = (Person) o;

        if ( ( getFirstname(  ) != null ) ? ( ! getFirstname(  ).equals( person.getFirstname(  ) ) )
                                              : ( person.getFirstname(  ) != null ) )
        {
            return false;
        }

        if ( ( getLastname(  ) != null ) ? ( ! getLastname(  ).equals( person.getLastname(  ) ) )
                                             : ( person.getLastname(  ) != null ) )
        {
            return false;
        }

        return true;
    }

    public int hashCode(  )
    {
        int result;
        result = ( ( getFirstname(  ) != null ) ? getFirstname(  ).hashCode(  ) : 0 );
        result = ( 31 * result ) + ( ( getLastname(  ) != null ) ? getLastname(  ).hashCode(  ) : 0 );

        return result;
    }

    // toString
    public String toString(  )
    {
        return String.format( "P[%d,%d,%s,%s,%s,%s,%d,%d]",
                              getId(  ),
                              getVersion(  ),
                              getLastname(  ),
                              getFirstname(  ),
                              new SimpleDateFormat( "dd/MM/yyyy" ).format( getBirthdate(  ) ),
                              getMarried(  ),
                              getNbchildren(  ),
                              getAddress(  ).getId(  ) );
    }
}
