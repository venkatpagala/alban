---
# This playbook contains common plays that will be run on all nodes.

- name: Checking if Sources are Available
  action: shell echo a$(cat /etc/apt/sources.list | grep $(echo   'http://url/${ansible_distribution}/stable' | tr "[:upper:]" "[:lower:]"  ))
  register: sources
  ignore_errors: True

- debug: msg="sources value is ${sources.stdout} "

- name: Adding source.
  action: shell echo "deb http://url/${ansible_distribution}/stable      ${ansible_lsb.codename} main" | tr "[:upper:]" "[:lower:]" >> /etc/apt/sources.list
  when: "ansible_distribution == 'Debian' and sources.stdout == 'a'"  
#      when: "ansible_os_family == 'RedHat' and sources.stdout == 'a'"

- name: Install basic tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - wget
   - curl
   - nmap
   - ssh  
   - iotop
   - htop
   
- name: Install editor tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - apt-show-versions
   - vim
   - geany
   - gedit
   - xxdiff
   - meld
   - dos2unix
   
- name: Install cowsay (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - aptitude
   - randomize-lines
   - cowsay 
   - fortunes 
   - fortunes-fr   
#TO CHECK sudo aptitude install cowsay fortunes fortunes-fr

#TODO sudo apt-get remove whoopsie   
   
- name: Install monitoring tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - smartmontools
   - mon
   - ssmtp
   - zabbix-agent 
   - snmp #for cacti
   - snmpd #for cacti

# ansible
- name: Test ansible is installed
  shell: ansible --version
  register: ansible_is_installed
  ignore_errors: yes

- name: Run install script as sudo
  script: setup-ansible.sh
  sudo: yes
  when: "ansible_is_installed|failed and (ansible_distribution == 'Ubuntu' or ansible_distribution == 'CentOS')"
  register: ansible_init_used_sudo

- name: Run install script without sudo
  script: setup-ansible.sh
  when: ansible_is_installed|failed and ansible_init_used_sudo|skipped

- name: Test ansible is installed
  shell: ansible --version

- name: Install perl (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - perl       
   - libnet-ssleay-perl
   - openssl
   - libauthen-pam-perl
   - libpam-runtime
   - libio-pty-perl

- name: Install python (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - python
   - python-pip 
   - python-dev 
   - build-essential
   
- name: Install SCM (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - subversion
   - cvs
   - git
#   - gitg
#   - gitk   
      
- name: Install JDK (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - openjdk-6-jdk 
   - openjdk-7-jdk

#sudo add-apt-repository ppa:webupd8team/java
#sudo apt-get update
#sudo apt-get install oracle-java7-installer
#sudo apt-get install oracle-java8-installer
#Switching between Oracle Java 8 and Java 7
#sudo update-java-alternatives -s java-7-oracle
#sudo update-java-alternatives -s java-8-oracle

#Setting Java environment variables
#sudo apt-get install oracle-java8-set-default    
      
- name: Install Java build tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - maven

- name: Install CPP build tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - cmake
   - scons
      
- name: Install test tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - xvfb
      
- name: Copy the xvfb init script
  copy: src=xvfb-$ansible_distribution-$ansible_architecture.sh dest=/etc/init.d/xvfb mode=0755

- name: Enable xvfb to be started at boot
  service: name=xvfb enabled=yes state=started 
    
- name: Start the xvfb service
  service: name=xvfb state=started enabled=true
  tags: xvfb
        
- name: Install AWS tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - ec2-api-tools    
   - s3cmd
         
- name: Install other tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - daemon
   - mailutils

#- name: Install connection tools (apt))
#  apt: pkg={{ item }} state=present update_cache=yes
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
#  with_items:   
#   - nis  
#   - ntp
#   - autofs

# ptxidns01/nissrv01 is dns for france.effix.fr and nis for france.effix.fr
- name: Configure domain file
  template: src=defaultdomain-$ansible_distribution-$ansible_architecture.j2 dest=/etc/defaultdomain
  tags: domain
    
- name: Configure resolv.conf file
  template: src=resolv.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/resolv.conf
  tags: domain    
    
- name: Install ntp (yum)
  yum: name=ntp state=present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  tags: ntp

- name: Install ntp (apt)
  apt: pkg=ntp state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: ntp

- name: Configure ntp file
  template: src=ntp.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/ntp.conf
  tags: ntp
  notify: restart ntp

- name: Start the ntp service
  service: name=ntp state=started enabled=true
  tags: ntp
 
- name: Install nis (apt)
  apt: pkg=nis state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: nis

- name: Configure yellow page file
  template: src=yp.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/yp.conf
  tags: nis
  notify: restart nis

- name: Configure nis file
  template: src=nsswitch.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/nsswitch.conf
  tags: nis
  notify: restart nis

- name: Copy the nis init script
  copy: src=nis-$ansible_distribution-$ansible_architecture.sh dest=/etc/init.d/nis mode=0755

- name: Enable nis to be started at boot
  service: name=nis enabled=yes state=started 
    
- name: Start the nis service
  service: name=nis state=started enabled=true
  tags: nis
  
- name: Install autofs (apt)
  apt: pkg=autofs state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: autofs 
 
- name: Configure autofs file
  template: src=rc.local-$ansible_distribution-$ansible_architecture.j2 dest=/etc/rc.local
  tags: autofs
  notify: restart autofs
  
- name: Configure autofs file
  template: src=auto.master-$ansible_distribution-$ansible_architecture.j2 dest=/etc/auto.master
  tags: autofs
  notify: restart autofs
   
- name: Configure autofs file
  template: src=autofs_ldap_auth.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/autofs_ldap_auth.conf
  tags: autofs
  notify: restart autofs

- name: Start the autofs service
  service: name=autofs state=started enabled=true
  tags: autofs  

- name: Configure xabbix file
  template: src=zabbix_agentd.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/zabbix/zabbix_agentd.conf
  tags: zabbix-agent
  notify: restart zabbix-agent

#- name: Start the xabbix service
#  service: name=zabbix-agent state=started enabled=true
#  tags: zabbix-agent
  
- name: Install sendmail tools (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - sendmail
   
- name: Configure sendmail file
  template: src=sendmail.cf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/mail/sendmail.cf
  tags: autofs
  notify: restart autofs

#- name: Install virtualbox (apt))
#  apt: pkg={{ item }} state=present update_cache=yes
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
#  with_items:   
#   - virtualbox-4.3
#   - vagrant
   
- name: Install messagingg (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - pidgin 
   - pidgin-sipe 
   - pidgin-skype   
   - teamviewer

- name: Install VNC (apt))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - vnc4server   

- name: Configure main supervisor file
  template: src=supervisord.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/supervisor/supervisord.conf
  tags: supervisor
  notify: restart supervisor

- name: Configure supervisor file
  template: src=supervisor-jenkins.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/supervisor/conf.d/supervisor-jenkins.conf
  tags: supervisor
  notify: restart supervisor
       
- include: copy-keys.yml
