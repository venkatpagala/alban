---
# This playbook contains common plays that will be run on all nodes.

- name: Checking if Sources are Available
  action: shell echo a$(cat /etc/apt/sources.list | grep $(echo 'http://url/${ansible_distribution}/stable' | tr "[:upper:]" "[:lower:]"  ))
  register: sources
  ignore_errors: True

- debug: msg="sources value is ${sources.stdout} "
 
- name: Adding source.
  action: shell echo "deb http://url/${ansible_distribution}/stable ${ansible_lsb.codename} main" | tr "[:upper:]" "[:lower:]" >> /etc/apt/sources.list
  when: "ansible_distribution == 'Debian' and sources.stdout == 'a'"  
#      when: "ansible_os_family == 'RedHat' and sources.stdout == 'a'"

- name: Install basic tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - wget
   - curl
   - nmap
   - ssh  
   
- name: Install editor tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - apt-show-versions
   - vim
   - geany
   - gedit

- name: Install monitoring tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:   
   - smartmontools
   - mon
   - ssmtp   
   - zabbix-agent 
   - snmp
   - snmpd
#   - ansible

- name: Install perl (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - perl       
   - libnet-ssleay-perl
   - openssl
   - libauthen-pam-perl
   - libpam-runtime
   - libio-pty-perl

- name: Install python (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - python
   - python-pip 
   - python-dev 
   - build-essential
   
- name: Install SCM (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - subversion
   - cvs
   - git
      
##
 # JAVA build tools.
 #           
- name: Install Java build tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - maven

##
 # CPP build tools.
 #   
- name: Install CPP build tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - cmake
   - scons
      
- name: Install test tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - xvfb
      
- name: Install AWS tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - ec2-api-tools    
         
- name: Install other tools (Debian based))
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - daemon
   - mailutils     
   - unzip 

##
 # NTP tools.
 #     
- name: Install ntp (yum)
  yum: name=ntp state=present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  tags: ntp

- name: Install ntp (Debian based)
  apt: pkg=ntp state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: ntp

- name: Configure ntp file
  template: src=ntp.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/ntp.conf
  tags: ntp
  notify: restart ntp

- name: Start the ntp service
  service: name=ntp state=started enabled=true
  tags: ntp
 
##
 # NIS tools.
 #   
- name: Install nis (Debian based)
  apt: pkg=nis state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: nis

- name: Configure yellow page file
  template: src=yp.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/yp.conf
  tags: nis
  notify: restart nis

- name: Configure nis file
  template: src=nsswitch.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/nsswitch.conf
  tags: nis
  notify: restart nis

- name: Copy the init script
  copy: src=nis-$ansible_distribution-$ansible_architecture.sh dest=/etc/init.d/nis mode=0755

- name: Enable nis to be started at boot
  service: name=nis enabled=yes state=started 
  
- name: Start the nis service
  service: name=nis state=started enabled=true
  tags: nis
  
##
 # AUTOFS tools.
 #     
- name: Install autofs (Debian based)
  apt: pkg=autofs state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: autofs 
 
- name: Configure autofs file
  template: src=rc.local-$ansible_distribution-$ansible_architecture.j2 dest=/etc/rc.local
  tags: autofs
  notify: restart autofs
  
- name: Configure autofs file
  template: src=auto.master-$ansible_distribution-$ansible_architecture.j2 dest=/etc/auto.master
  tags: autofs
  notify: restart autofs
   
- name: Configure autofs file
  template: src=autofs_ldap_auth.conf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/autofs_ldap_auth.conf
  tags: autofs
  notify: restart autofs

- name: Start the autofs service
  service: name=autofs state=started enabled=true
  tags: autofs  

- name: Configure sendmail file
  template: src=sendmail.cf-$ansible_distribution-$ansible_architecture.j2 dest=/etc/mail/sendmail.cf
  tags: autofs
  notify: restart autofs

#- name: add zfs repos
#  apt_repository: repo='deb http://example.com/ubuntu precise main'
#  apt_repository: repo='deb http://example.com/ubuntu precise-updates main'
#  apt_repository: repo='deb http://ppa.launchpad.net/zfs-native/stable/ubuntu ${ubuntu_version_name} main' 
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  

##
 # ZFS tools.
 #  
- name: ZFS | Add the ZFS native PPA
  action: command add-apt-repository -y ppa:zfs-native/stable creates=/etc/apt/sources.list.d/custom-zfs-${ubuntu_version_name}.list
  tags: zfs
   
#- name: ZFS | Add the ZFS grub PPA
#  action: command add-apt-repository -y ppa:zfs-native/grub creates=/etc/apt/sources.list.d/custom-zfs-${ubuntu_version_name}.list
#  tags: zfs   

- name: ZFS | Update the apt cache for the new repository
  action: apt update-cache=yes
  tags: zfs

- name: Install zfs (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'  
  with_items:
   - ubuntu-zfs
   - zfs-fuse
   - debootstrap
   - grub2-common 
   - grub-pc  
   - zfs-initramfs
   
