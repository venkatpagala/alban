#ansible-playbook jenkins.yml --extra-vars "host=myhost user=myuser" -i hosts --ask-sudo-pass

- name: Install wget package (Debian based)
  action: apt pkg='wget' state=installed
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install wget package (RedHat based)
  action: yum name='wget' state=installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Copy download JDK7 script
  copy: src=download-jdk7.sh dest=/tmp mode=0555

- name: Download JDK7 (Ubuntu)
  action: command creates={{ jvm_folder }}/jdk1.7.0 chdir={{ jvm_folder }} /tmp/download-jdk7.sh {{ jdk7_archive }}

- name: Unpack JDK7
  action: command creates={{ jvm_folder }}/jdk1.7.0 chdir={{ jvm_folder }} tar zxvf {{ jvm_folder }}/{{ jdk7_archive }} --owner=root
  register: jdk7_installed
  ignore_errors: True
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install JDK7 RPM package
  action: command creates={{ jvm_folder }}/latest chdir={{ jvm_folder }} rpm --force -Uvh {{ jvm_folder }}/{{ jdk7_archive }}
  register: jdk7_installed
  ignore_errors: True
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

#- debug: msg="jdk7_installed value is ${jdk7_installed.stdout} "

- debug: msg="jdk7_installed value is {{ jdk7_installed }} {{ jdk7_installed.skipped }} {{ jdk7_installed.changed }}"

- include: jdk7-tasks.yml

- name: Copy download JDK8 script
  copy: src=download-jdk8.sh dest=/tmp mode=0555

- name: Download JDK8 (Ubuntu)
  action: command creates={{ jvm_folder }}/jdk1.8.0 chdir={{ jvm_folder }} /tmp/download-jdk8.sh {{ jdk8_archive }}

- name: Unpack JDK8
  action: command creates={{ jvm_folder }}/jdk1.8.0 chdir={{ jvm_folder }} tar zxvf {{jvm_folder}}/{{ jdk8_archive }} --owner=root
  register: jdk8_installed
  ignore_errors: True    
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'      

- name: Install JDK8 RPM package
  action: command creates={{ jvm_folder }}/latest chdir={{ jvm_folder }} rpm --force -Uvh {{ jvm_folder }}/{{ jdk8_archive }}
  register: jdk8_installed
  ignore_errors: True  
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'  

#- debug: msg="jdk8_installed value is ${jdk8_installed.stdout} "

- debug: msg="jdk8_installed value is {{ jdk8_installed }} {{ jdk8_installed.skipped }} {{ jdk8_installed.changed }}"

- include: jdk8-tasks.yml
 
- name: Install subversion package (Debian based)
  action: apt pkg='subversion' state=installed
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Install subversion package (RedHat based)
  action: yum name='subversion' state=installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Create /opt directory
  file: path=/opt state=directory

- name: Download Maven 3.2.1
  get_url: dest=/opt/maven321.tar.gz url=http://archive.apache.org/dist/maven/binaries/apache-maven-3.2.1-bin.tar.gz

- name: Unpack Maven 3.2.1
  action: command creates=/opt/maven321 chdir=/opt tar zxvf /opt/maven321.tar.gz

- name: Create Maven 3.2.1 directory link
  file: path=/opt/maven321 src=/opt/apache-maven-3.2.1 state=link

- name: Create Maven 3.2.1 directory link (legacy required)
  file: path=/usr/local/apache-maven-3.2.1 src=/opt/apache-maven-3.2.1 state=link
  
#- name: Download Maven 3.0.5
#  get_url: dest=/opt/maven305.tar.gz url=http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.5-bin.tar.gz

#- name: Unpack Maven 3.0.5
#  action: command creates=/opt/maven305 chdir=/opt tar zxvf /opt/maven305.tar.gz

#- name: Create Maven 3.0.5 directory link
#  file: path=/opt/maven305 src=/opt/apache-maven-3.0.5 state=link

#- name: Create Maven 3.0.5 directory link (legacy required)
#  file: path=/usr/local/apache-maven-3.0.5 src=/opt/apache-maven-3.0.5 state=link
    
#- name: Download Maven 3.0.4
#  get_url: dest=/opt/maven3.tar.gz url=http://archive.apache.org/dist/maven/binaries/apache-maven-3.0.4-bin.tar.gz

#- name: Unpack Maven 3.0.4
#  action: command creates=/opt/maven3 chdir=/opt tar zxvf /opt/maven3.tar.gz

#- name: Create Maven 3.0.4 directory link
#  file: path=/opt/maven3 src=/opt/apache-maven-3.0.4 state=link

#- name: Create Maven 3.0.4 directory link (legacy required)
#  file: path=/usr/local/apache-maven-3.0.4 src=/opt/apache-maven-3.0.4 state=link

#- name: Download Maven 2.2.1
#  get_url: dest=/opt/maven2.tar.gz url=http://archive.apache.org/dist/maven/binaries/apache-maven-2.2.1-bin.tar.gz

#- name: Unpack Maven 2.2.1
#  action: command creates=/opt/maven2 chdir=/opt tar zxvf /opt/maven2.tar.gz

#- name: Create Maven 2.2.1 directory link
#  file: path=/opt/maven2 src=/opt/apache-maven-2.2.1 state=link

#- name: Create Maven 2.2.1 directory link (legacy required)
#  file: path=/usr/local/apache-maven-2.2.1 src=/opt/apache-maven-2.2.1 state=link

#- name: Download Maven 2.0.9
#  get_url: dest=/opt/maven209.tar.gz url=http://archive.apache.org/dist/maven/binaries/apache-maven-2.0.9-bin.tar.gz

#- name: Unpack Maven 2.0.9
#  action: command creates=/opt/maven209 chdir=/opt tar zxvf /opt/maven209.tar.gz

#- name: Create Maven 2.0.9 directory link
#  file: path=/opt/maven209 src=/opt/apache-maven-2.0.9 state=link

#- name: Create Maven 2.0.9 directory link (legacy required)
#  file: path=/usr/local/apache-maven-2.0.9 src=/opt/apache-maven-2.0.9 state=link

- name: Remove Maven321 archive
  file: path=/opt/maven321.tar.gz state=absent

- name: Remove Maven305 archive
  file: path=/opt/maven305.tar.gz state=absent

- name: Remove Maven3 archive
  file: path=/opt/maven3.tar.gz state=absent

- name: Remove Maven2 archive
  file: path=/opt/maven2.tar.gz state=absent

- name: Remove Maven209 archive
  file: path=/opt/maven209.tar.gz state=absent

##
 # node.js installation (latest stable instead of Ubuntu's out-of-date one)
 #
- name: Node.js | Package prerequisites for node.js
  action: apt pkg=python-software-properties state=installed
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: nodejs

#- name: add node.js repos
- name: Node.js | Add the node.js PPA
#  action: command add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/custom-node_js-{{ ansible_lsb.codename }}.list
  apt_repository: repo='ppa:chris-lea/node.js'
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: nodejs

- name: Node.js | Update the apt cache for the new repository
  action: apt update-cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags: nodejs

- name: Node.js | Install nodejs and npm
  action: apt pkg={{ item }} state=installed
  tags: nodejs
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
    - nodejs
#WARNING DO NOT INSTALL    - node    

- name: Install karma tools (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
   - karma-tools

- name: Install selenium tools (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
   - xfonts-100dpi
   - xfonts-75dpi
   - xfonts-scalable
   - xfonts-cyrillic
   - xvfb
   - x11-apps
   - imagemagick

# NPM may or may not succeed, if you give it time, care, etc. it eventually works

- name: Ensure npm settings
  command: chdir=/usr/bin npm config set prefix /usr/local

- name: Ensure npm is properly installed
  command: chdir=/usr/bin npm config get prefix

- name: Ensure the grunt npm dependencies are installed
  command: chdir=/usr/bin npm install -g grunt@0.4.4

- name: Ensure the grunt-cli npm dependencies are installed
  command: chdir=/usr/bin npm install -g grunt-cli@0.1.13

- name: Ensure the bower npm dependencies are installed
  command: chdir=/usr/bin npm install -g bower@1.3.2

- name: Ensure the protractor npm dependencies are installed
  command: chdir=/usr/bin npm install -g protractor@0.20.1

- debug: msg="ansible_distribution_version value is {{ ansible_distribution_version }} "
- debug: msg="ansible_distribution_release is {{ ansible_distribution_release }} "

- name: Ensure the karma npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma@0.12.9
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release != 'precise' )

#Ubuntu 12 ln -s /usr/local/lib/node_modules/karma/bin/karma /usr/local/bin/karma
#- name: Create karma binaries link (legacy required)
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  file: path=/usr/local/bin/karma src=/usr/local/lib/node_modules/karma/bin/karma state=link
 
#TODO below does not works
#- name: Update karma rights
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  file: path=/usr/local/lib/node_modules mode=0777 owner=root group=root state=directory recurse=yes

#TODO WORKAROUND by hand
#cd /usr/local/bin
#ln -s ../lib/node_modules/karma/bin/karma karma

#cd /usr/local/lib/node_modules
#chown -R nobody:jenkins *

- name: Ensure the karma-junit-reporter npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-junit-reporter@0.2.2 

- name: Ensure the karma-ng-scenario npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-ng-scenario@0.1.0

- name: Ensure the karma-ng-html2js-preprocessor npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-ng-html2js-preprocessor@0.1.0

- name: Ensure the karma-coverage npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-coverage@0.2.1

- name: Ensure the karma-jasmine npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-jasmine@0.1.5

- name: Ensure the jasmine-reporters npm dependencies are installed
  command: chdir=/usr/bin npm install -g jasmine-reporters@0.4.1

- name: Ensure the phantomjs npm dependencies are installed
  command: chdir=/usr/bin npm install -g phantomjs@1.9.2-4
#  command: chdir=/usr/bin npm install -g phantomjs@1.9.7-6

- name: Ensure the karma-requirejs npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-requirejs@0.2.1
  
#- name: Ensure the karma-phantomjs-launcher npm dependencies are installed
#  command: chdir=/usr/bin npm install -g karma-phantomjs-launcher@0.1.4
  
- name: Ensure the karma-chrome-launcher npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-chrome-launcher@0.1.3
  
- name: Ensure the karma-firefox-launcher npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-firefox-launcher@0.1.3
  
- name: Ensure the karma-ie-launcher npm dependencies are installed
  command: chdir=/usr/bin npm install -g karma-ie-launcher

#- name: Ensure the webdriverjs npm dependencies are installed
#  command: chdir=/usr/bin npm install -g webdriverjs

#TODO check /etc/apt/sources.list
#TODO wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
#TODO add sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
- name: Add google repos
  apt_repository: repo='deb http://dl.google.com/linux/chrome/deb/ stable main'

- name: Addkey google
  apt_key: url=https://dl-ssl.google.com/linux/linux_signing_key.pub  state=present

- name: install google
  apt: name=google-chrome-stable state=latest update_cache=yes

- name: Install browser tools (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
   - firefox
   - chromium-browser

- name: Install browser tools specific (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
#specific for ubuntu 13.04 and 13.10
  when: ( ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' )  and ( ansible_distribution_release == 'saucy' )
  with_items:
   - chromium-chromedriver
   
#TODO by hand for Ubuntu saucy
#better is to us Jenkins plugins that is intalling chromedriver
#cd /usr/lib/chromium-browser
#sudo wget http://chromedriver.storage.googleapis.com/2.9/chromedriver_linux64.zip
#sudo wget http://chromedriver.storage.googleapis.com/2.9/chromedriver_linux32.zip
#unzip chromedriver_linux64.zip   
#unzip chromedriver_linux32.zip   
   
- name: Enable Yum repo for Google Chrome
  copy: dest=/etc/yum.repos.d/google-chrome.repo src=google-chrome.repo
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install Google Chrome
  yum: name=google-chrome-stable state=present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Enable Yum repo for Google Talk
  copy: dest=/etc/yum.repos.d/google-talkplugin.repo src=google-talkplugin.repo
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install Google Talk Plugin
  yum: name=google-talkplugin state=present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

##
 # CSS compiling tools.
 #
- name: CSS | Install rubygems package
  action: apt pkg=rubygems state=installed
  tags: css

- name: CSS | Install SASS
  action: command gem install sass creates=/usr/local/bin/sass
  tags: css

- name: CSS | Install Susy (no more --pre required as it's 1.0 now)
  action: command gem install susy
  tags: css

- name: CSS | Install Compass
  action: command gem install compass creates=/usr/local/bin/compass
  tags: css

#- name: CSS | Install Respond-to
#  action: command gem install respond-to
#  tags: css

- name: Install coverage and metrics tools (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
   - lcov
   - graphviz
   - doxygen
   
#TODO opencl install
#wget http://registrationcenter.intel.com/irc_nas/4181/intel_sdk_for_ocl_applications_2014_ubuntu_4.4.0.117_x64.tgz
#tar zxvf intel_sdk_for_ocl_applications_2014_ubuntu_4.4.0.117_x64.tgz
#./install-cpu.sh
#ll /usr/lib/x86_64-linux-gnu/libOpenCL.so   
   
- name: Install C++ tools (Debian based)
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
   - libxml-dom-perl
   - libfile-find-rule-perl
   - libjson-perl
   - libdate-calc-perl
   - libdate-manip-perl
   - libcrypt-ssleay-perl
   - libxml-handler-yawriter-perl
   - libxml-simple-perl

#TODO extract jenkins user to another script
# jenkins user
- name: Create jenkins user
  user: name=jenkins comment="Jenkins slave user" home={{ jenkins_home }} shell=/bin/bash
  ignore_errors: True

- name: Create .ssh folder
  file: path={{ jenkins_home }}/.ssh state=directory mode=0700 owner=jenkins
  ignore_errors: True

- name: Add passwordless connection for jenkins (Alban Andrieu)
  authorized_key: user=jenkins key="ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAio3SOQ9yeK6QfKqSFNKyTasuzjStxWevG1Vz1wgJIxPF+KB0XoMAPD081J+Bzj2LCDRSWisNv2L4xv2jbFxW/Pl7NEakoX47eNx3U+Dxaf+szeWBTryYcDUGkduLV7G8Qncm0luIFd+HDIe/Qir1E2f56Qu2uuBNE6Tz5TFt1vc= Alban"

- name: Update authorized_keys rights
  file: path={{ jenkins_home }}/.ssh/authorized_keys state=file mode=0600 owner=jenkins

- name: Copy the .netrc script for git credentials
  copy: src=.netrc dest={{ jenkins_home }}/.netrc mode=0600 owner=jenkins

- name: Update git .netrc rights
  file: path={{ jenkins_home }}/.netrc state=file mode=0600 owner=jenkins

- name: Create .m2 folder
  file: path={{ jenkins_home }}/.m2 state=directory owner=jenkins mode=0775

- name: Copy maven configuration
  template: src=settings.xml.j2 dest={{ jenkins_home }}/.m2/settings.xml backup=yes owner=jenkins mode=0700

- name: Jenkins can run any command with no password
  lineinfile: "line='jenkins ALL=NOPASSWD: ALL' dest=/etc/sudoers regexp='^jenkins'"
 
- name: Copy sonar runner configuration
  copy: src=sonar-runner.properties dest=/kgr-mvn/ backup=yes owner=jenkins
  
- name: Create /kgr-mvn directory
  file: path=/kgr-mvn state=directory

- name: Create /repository directory
  file: path=/kgr-mvn/repository state=directory owner=jenkins

- name: Create Jenkins slave directory
  file: path=/kgr-mvn/Jenkins-slave state=directory owner=jenkins mode=0775

- name: Create Java directory link (legacy required)
  file: path=/kgr-mvn/jdk src=/usr/lib/jvm/jdk1.7.0 state=link

#END OF TODO extract jenkins user to another script

- name: Set java link
  action: command update-alternatives --install /usr/bin/java java {{ jvm_folder }}/jdk1.7.0/bin/java 1
  when: "jdk7_installed.changed == 'True'"

- name: Set jar link
  action: command update-alternatives --install /usr/bin/jar jar {{ jvm_folder }}/jdk1.7.0/bin/jar 1
  when: "jdk7_installed.changed == 'True'"

#TODO  
#sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.6.0_32/bin/javac 1
#sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.6.0_32/bin/java 1
#sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk1.6.0_32/bin/javaws 1  
#- name: Set java link
#  action: command update-alternatives --install /usr/bin/java java {{ jvm_folder }}/jdk1.8.0/bin/java 1
#  when: "jdk8_installed.changed == 'True'"

#TODO
#sudo update-alternatives --config javac
#sudo update-alternatives --config java
#sudo update-alternatives --config javaws
#sudo update-alternatives --config javadoc
#sudo update-alternatives --config javafxpackager
#sudo update-alternatives --config javah
#sudo update-alternatives --config javap
#- name: Set jar link
#  action: command update-alternatives --install /usr/bin/jar jar {{ jvm_folder }}/jdk1.8.0/bin/jar 1
#  when: "jdk8_installed.changed == 'True'"
  
#TODO Verify the symlinks all point to the new java location:
#ls -la /etc/alternatives/java*
   
#- name: Set mvn link to Maven 3.0.4
#  action: command update-alternatives --install /usr/bin/mvn mvn /opt/maven3/bin/mvn 1

#sudo update-alternatives --config mvn
#- name: Set mvn link to Maven 3.0.5
#  action: command update-alternatives --install /usr/bin/mvn mvn /opt/maven305/bin/mvn 1
  
#- name: Set mvn local link to Maven 3.0.5
#  action: command update-alternatives --install /usr/local/bin/mvn mvn /opt/maven305/bin/mvn 1

- name: Set mvn link to Maven 3.2.1
  action: command update-alternatives --install /usr/bin/mvn mvn /opt/maven321/bin/mvn 1
  
- name: Download Jenkins Swarm Client
  get_url: dest=${jenkins_home}/swarm-client-1.9-jar-with-dependencies.jar url=http://maven.jenkins-ci.org/content/repositories/releases/org/jenkins-ci/plugins/swarm-client/1.9/swarm-client-1.9-jar-with-dependencies.jar owner=jenkins

- name: Install swarm client script
  template: src=jenkins-swarm-client.tmpl dest=/etc/init.d/jenkins-swarm-client mode=0700

#- fail: msg="Missing parameters!"
#  when_string: $jenkins_username == '' or $jenkins_password == ''

#- name: Start Jenkins swarm client
#  action: service name=jenkins-swarm-client state=started enabled=yes

#http://drupalcode.org/sandbox/franskuipers/1801378.git/blob/e0d2e3dd3f3b9ff7f9ace61f9e56c56a1f28e915:/ansible.yml  #

#- name: Clone the application
#  action: git repo=http://almtools/stash/scm/risk/buildmasters.git dest=/jenkins/buildmasters
